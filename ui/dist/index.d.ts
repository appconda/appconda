// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../react-router-dom
//   ../../react

export { useNavigate, useLocation, Link, HashRouter, Routes, Router, Route } from 'react-router-dom';
import React, { FunctionComponent } from "react";
import { ReactNode } from "react";
import React from "react";
import { ReactNode } from 'react';
import React, { ReactNode } from "react";

export function useParams(): any;

export function ViewProperty(defaultValue?: any): any;

type int = number;
export class UIView {
    static Renderer: any;
    propertyBag: {};
    BeginUpdate(): void;
    EndUpdate(): void;
    vp_Key: string;
    vp_Tooltip: string;
    tooltip(value: string): this;
    vp_Tag: any;
    tag(value: any): this;
    vp_Ref: any;
    ref(value: any): this;
    vp_ClassName: string;
    className(value: string): this;
    HoverAppearance: AppearanceObject;
    Appearance: AppearanceObject;
    FocusAppearance: AppearanceObject;
    ActiveAppearance: AppearanceObject;
    DisabledAppearance: AppearanceObject;
    BeforeAppearance: AppearanceObject;
    AfterAppearance: AppearanceObject;
    constructor();
    RenderStarted(): void;
    RenderFinished(): void;
    SetViewProperty(propertyName: any, value?: any): void;
    /** @internal */
    vp_OnDragStart: Function;
    onDragStart(value: Function): this;
    vp_OnDragEnd: Function;
    onDragEnd(value: Function): this;
    /** @internal */
    vp_OnDragOver: Function;
    onDragOver(value: Function): this;
    /** @internal */
    vp_OnDrop: Function;
    onDrop(value: Function): this;
    protected onDropInternal(e: any): void;
    /** @internal */
    vp_OnDragEnter: Function;
    onDragEnter(value: Function): this;
    /** @internal */
    vp_OnDragLeave: Function;
    onDragLeave(value: Function): this;
    /** @internal */
    vp_OnClick: Function;
    onClick(value: Function): this;
    /** @internal */
    vp_OnPointerDown: Function;
    onPointerDown(value: Function): this;
    protected onClickInternal(e: any): void;
    /** @internal */
    vp_OnMouseDown: Function;
    onMouseDown(value: Function): this;
    protected onMouseDownInternal(e: any): void;
    /** @internal */
    vp_OnFocus: Function;
    onFocus(value: Function): this;
    protected onFocusInternal(e: any): void;
    /** @internal */
    vp_OnFocusOut: Function;
    onFocusOut(value: Function): this;
    protected onFocusOutInternal(e: any): void;
    /** @internal */
    vp_OnBlur: Function;
    onBlur(value: Function): this;
    protected onBlurInternal(e: any): void;
    /** @internal */
    vp_OnScroll: Function;
    onScroll(value: Function): this;
    protected onScrollInternal(e: any): void;
    /** @internal */
    vp_OnKeyDown: Function;
    onKeyDown(value: Function): this;
    /** @internal */
    vp_Disabled: boolean;
    disabled(value: boolean): this;
    /** @internal */
    vp_TabIndex: number;
    tabIndex(value: number): this;
    /** @internal */
    vp_Visible: boolean;
    visible(value: boolean): this;
    visibility(value: string): this;
    gridTemplateRows(value: string): this;
    /** @internal */
    vp_ScrollTop: number;
    scrollTop(value: number): this;
    /** @internal */
    vp_Style: string;
    style(value: string): this;
    ForceUpdate(): void;
    width(): this;
    width(value: int): this;
    width(value: string): this;
    width(value: StyleAttribute): this;
    minWidth(): this;
    minWidth(value: int): this;
    minWidth(value: string): this;
    minWidth(value: StyleAttribute): this;
    maxWidth(): this;
    maxWidth(value: int): this;
    maxWidth(value: string): this;
    maxWidth(value: StyleAttribute): this;
    allWidth(): this;
    allWidth(value: int): this;
    allWidth(value: string): this;
    height(): this;
    height(value: int): this;
    height(value: string): this;
    height(value: StyleAttribute): this;
    allHeight(): this;
    allHeight(value: int): this;
    allHeight(value: string): this;
    minHeight(): this;
    minHeight(value: int): this;
    minHeight(value: string): this;
    minHeight(value: StyleAttribute): this;
    maxHeight(): this;
    maxHeight(value: int): this;
    maxHeight(value: string): this;
    maxHeight(value: StyleAttribute): this;
    backgroundColor(value: StyleAttribute): this;
    backgroundColor(value: string): this;
    background(value: ColorClass): this;
    background(value: StyleAttribute): this;
    background(color: string): this;
    background(condition: boolean, trueValue: string, falseValue: string): this;
    backgroundImage(value: StyleAttribute): this;
    backgroundImage(value: string): this;
    position(value: PositionTypes): this;
    position(value: StyleAttribute): this;
    position(value: string): this;
    flexBasis(value: StyleAttribute): this;
    flexBasis(value: string): this;
    flexGrow(value: StyleAttribute): this;
    flexGrow(value: string): this;
    flexShrink(value: StyleAttribute): this;
    flexShrink(value: string): this;
    flex(value: StyleAttribute): this;
    flex(value: string): this;
    writingMode(value: StyleAttribute): this;
    writingMode(value: string): this;
    left(value: StyleAttribute): this;
    left(value: string): this;
    top(value: StyleAttribute): this;
    top(value: string): this;
    right(value: StyleAttribute): this;
    right(value: string): this;
    bottom(value: StyleAttribute): this;
    bottom(value: string): this;
    transform(value: StyleAttribute): this;
    transform(value: string): this;
    transformOrigin(value: StyleAttribute): this;
    transformOrigin(value: string): this;
    rotate(value: string): this;
    clipPath(): this;
    clipPath(value: string): this;
    clipPath(value: StyleAttribute): this;
    filter(value: string): this;
    verticalAlign(value: VerticalAligns): this;
    textAlign(value: TextAligns): this;
    textTransform(value: TextTransforms): this;
    fontFamily(size: string): this;
    fontSmoothing(value: string): this;
    fontSize(value: (view: UIView) => void): this;
    fontSize(size: int): this;
    fontSize(size: string): this;
    fontWeight(weight: FontWeightModifierTypes): this;
    lineHeight(size: int): this;
    lineHeight(size: string): this;
    grow(): this;
    foregroundColor(value: ColorClass): this;
    foregroundColor(value: StyleAttribute): this;
    foregroundColor(color: string): this;
    foregroundColor(condition: boolean, trueValue: string, falseValue: string): this;
    backgroundSize(value: StyleAttribute): this;
    backgroundSize(value: string): this;
    content(value: StyleAttribute): this;
    content(value: string): this;
    cursor(value: StyleAttribute): this;
    cursor(value: string): this;
    alignItems(value: string): this;
    alignContent(value: string): this;
    justifyContent(value: string): this;
    cornerRadius(): this;
    cornerRadius(value: StyleAttribute): this;
    cornerRadius(value: CornerRadiusTypes): this;
    cornerRadius(value: string): this;
    cornerRadius(value: int): this;
    pointerEvents(): this;
    pointerEvents(value: StyleAttribute): this;
    pointerEvents(value: string): this;
    outline(value: StyleAttribute): this;
    outline(value: string): this;
    inset(value: StyleAttribute): this;
    inset(value: string): this;
    border(value: StyleAttribute): this;
    border(value: string): this;
    borderLeft(value: StyleAttribute): this;
    borderLeft(value: string): this;
    borderRight(value: StyleAttribute): this;
    borderRight(value: string): this;
    borderTop(value: StyleAttribute): this;
    borderTop(value: string): this;
    borderBottom(value: StyleAttribute): this;
    borderBottom(value: string): this;
    wrap(value: string): this;
    basis(value: string): this;
    margin(): this;
    margin(value: string): this;
    margin(value: int): this;
    marginVertical(): this;
    marginVertical(value: string): this;
    marginVertical(value: int): this;
    marginHorizontal(): this;
    marginHorizontal(value: string): this;
    marginHorizontal(value: int): this;
    marginLeft(): this;
    marginLeft(value: int): this;
    marginLeft(value: string): this;
    marginLeft(value: StyleAttribute): this;
    marginRight(): this;
    marginRight(value: int): this;
    marginRight(value: string): this;
    marginRight(value: StyleAttribute): this;
    marginTop(): this;
    marginTop(value: int): this;
    marginTop(value: string): this;
    marginTop(value: StyleAttribute): this;
    marginBottom(): this;
    marginBottom(value: int): this;
    marginBottom(value: string): this;
    marginBottom(value: StyleAttribute): this;
    padding(): this;
    padding(value: string): this;
    padding(type: string, value: string): this;
    padding(value: int): this;
    padding(type: string, value: int): this;
    paddingLeft(value: string): this;
    paddingRight(value: string): this;
    paddingTop(value: string): this;
    paddingBottom(value: string): this;
    overflow(value: string): this;
    overflowX(value: string): this;
    overflowY(value: string): this;
    float(value: string): this;
    shadow(value: StyleAttribute): this;
    shadow(value: ShadowTypes): this;
    shadow(value: string): this;
    transition(value: string): this;
    opacity(): this;
    opacity(value: int): this;
    opacity(value: string): this;
    opacity(value: StyleAttribute): this;
    display(value: StyleAttribute): this;
    display(value: string): this;
    kerning(value: string): this;
    wordBreak(value: 'normal' | 'break-all' | 'keep-all' | 'break-word'): this;
    wordWrap(value: 'normal' | 'break-word'): this;
    alignment(value: AlignmentType): this;
    zIndex(value: StyleAttribute): this;
    zIndex(value: int): this;
    variable(name: string, value: StyleAttribute): this;
    /** @internal */
    vp_Renderer: FunctionComponent<any>;
    renderer(value: FunctionComponent<any>): this;
    renderAsAnimated: boolean;
    _initial: any;
    _animate: any;
    _transition: any;
    _whileHover: any;
    _whileTap: any;
    _whileDrag: any;
    _whileFocus: any;
    _whileInView: any;
    _exit: any;
    initial(value: any): this;
    animate(value: any): this;
    __transition(value: any): this;
    hover(value: any): this;
    tap(value: any): this;
    drag(value: any): this;
    focus(value: any): this;
    GetEventsObject(): Object;
    GetClassName(): string;
    render(): React.ReactNode;
}
export {};

interface HStackParams {
    alignment?: AlignmentType;
    spacing?: number;
}
type FunctionHStack = (...views: UIView[]) => HStackClass;
export function HStack(): HStackClass;
export function HStack(...views: (UIView)[]): HStackClass;
export function HStack(value: HStackParams): FunctionHStack;
export {};

interface VStackParams {
    alignment?: AlignmentType;
    spacing?: number;
}
type FunctionVStack = (...views: (UIView | ReactNode)[]) => VStackClass;
export function VStack(): VStackClass;
export function VStack(...views: (UIView | ReactNode)[]): VStackClass;
export function VStack(value: VStackParams): FunctionVStack;
export {};

export function Text(text: string): TextClass;

export const cAll = "cAll";
export const cHorizontal = "cHorizontal";
export const cVertical = "cVertical";
export const cLeft = "cLeft";
export const cRight = "cRight";
export const cTopLeading = "cTopLeading";
export const cTop = "cTop";
export const cTopTrailing = "cTopTrailing";
export const cLeading = "cLeading";
export const cCenter = "cCenter";
export const cTrailing = "cTrailing";
export const cBottomTrailing = "cBottomTrailing";
export const cBottom = "cBottom";
export const cBottomLeading = "cBottomLeading";
export type AlignmentType = 'cTopLeading' | 'cTop' | 'cTopTrailing' | 'cLeading' | 'cCenter' | 'cTrailing' | 'cBottomTrailing' | 'cBottom' | 'cBottomLeading';
export type FontWeightModifierTypes = 'normal' | 'bold' | 'lighter' | 'bolder' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'inherit' | 'initial' | 'revert' | 'unset';
export type TextAligns = 'left' | 'right' | 'center' | 'justify' | 'initial' | 'inherit';
export type VerticalAligns = 'bottom' | 'middle' | 'top';
export type TextTransforms = 'capitalize' | 'uppercase' | 'lowercase' | 'none' | 'full-width' | 'full-size-kana';
export enum ShadowTypes {
    Small = "0 1px 2px 0 rgb(0 0 0 / 0.05)",
    Shadow = "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
    Medium = "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
    Large = "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
    XLarge = "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
    XXLarge = "0 25px 50px -12px rgb(0 0 0 / 0.25)",
    Inner = "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
    None = "0 0 #0000"
}
export enum CornerRadiusTypes {
    None = "0px",
    Small = "0.125rem",
    Rounded = "0.25rem",
    Medium = "0.375rem",
    Large = "0.5rem",
    XLarge = "0.75rem",
    XXLarge = "1rem",
    XXXLarge = "1.5rem",
    Full = "9999px"
}
export class FontSizeTypes {
    static XSmall: (view: UIView) => void;
    static Small: (view: UIView) => void;
    static Base: (view: UIView) => void;
    static Large: (view: UIView) => void;
    static LargeX: (view: UIView) => void;
    static Large2X: (view: UIView) => void;
    static Large3X: (view: UIView) => void;
}
export class FontSmoothingTypes {
    static Antialiased: (view: UIView) => void;
    static Subpixel: (view: UIView) => void;
}
export interface IFont {
    family?: string;
    size?: string;
    weight?: FontWeightModifierTypes;
    leading?: string;
    spacing?: string;
}
export enum PositionTypes {
    Static = "static",
    Fixed = "fixed",
    Absolute = "absolute",
    Relative = "relative",
    Sticky = "sticky"
}
export class Fonts {
    static largeTitle: IFont;
    static title: IFont;
    static title2: IFont;
    static title3: IFont;
    static headline: IFont;
    static body: IFont;
    static callout: IFont;
    static subhead: IFont;
    static footnote: IFont;
    static caption: IFont;
    static caption2: IFont;
}
export enum Alignment {
    topLeading = 0,
    top = 1,
    topTrailing = 2,
    leading = 3,
    center = 4,
    trailing = 5,
    bottomTrailing = 6,
    bottom = 7,
    bottomLeading = 8
}

export function State(defaultValue?: any): any;
export class UIController extends React.Component<any, any> {
    constructor(props: any);
    protected SetProperty(name: string, value: any): void;
    protected BindRouterParams(routerParams?: any): void;
    protected OnControllerLoaded(): void;
    protected OnControllerUnLoaded(): void;
    LoadView(): UIView;
    protected LoadViewInternal(): UIView;
    render(): React.ReactNode;
}

type ForEachIterateFunction<T> = (item: T, index?: number) => UIView;
export function ForEach<T>(enumarable: UIView[]): (value: ForEachIterateFunction<T>) => any[];
export {};

export class SpacerClass extends UIView {
    constructor();
    render(): React.JSX.Element;
}
export function Spacer(): SpacerClass;

interface ScrollViewParams {
    axes?: 'cHorizontal' | 'cVertical' | 'cAll';
    alignment?: AlignmentType;
    showsIndicators?: boolean;
    content?: any;
}
type FunctionScrollView = (...views: UIView[]) => VStackClass;
export function ScrollView(value: string): FunctionScrollView;
export function ScrollView(...views: UIView[]): VStackClass;
export function ScrollView(value: ScrollViewParams): FunctionScrollView;
export {};

export function ReactView(node: ReactNode): ReactViewClass;

export function StartBios(biosController: any): void;

export function urlFriendly(value: any): string;

export namespace TypeValue {
    type Boolean = 'boolean';
    type Number = 'number';
    type String = 'string';
    type Symbol = 'symbol';
    type Object = 'object';
    type Undefined = 'undefined';
    type Function = 'function';
    type Primitive = String | Number | Boolean;
    type Any = Primitive | Symbol | Undefined | Function;
}
export const VOID0: undefined, _BOOLEAN: "boolean", _NUMBER: "number", _STRING: "string", _SYMBOL: "symbol", _OBJECT: "object", _UNDEFINED: "undefined", _FUNCTION: "function", LENGTH: string;
export class is {
    static number(value: any, ignoreNaN?: boolean): value is number;
    /**
    * Returns true if the value parameter is a string.
    * @param value
    * @returns {boolean}
    */
    static string(value: any): value is string;
    /**
    * Returns true if the value parameter is a function.
    * @param value
    * @returns {boolean}
    */
    static function(value: any): value is Function;
    static array<T = any>(value: any): value is Array<T>;
    static nan(value: any): boolean;
    static null(value: any): boolean;
    static notNull(value: any): boolean;
    static nullOrEmpty(value: any): boolean;
}

export function Skin(styleName: string): (target: any, key: string) => void;
export enum BorderAppearanceStyle {
        None = "none",
        Hidden = "hidden",
        Dotted = "dotted",
        Dashed = "dashed",
        Solid = "solid",
        Double = "double",
        Groove = "groove",
        Ridge = "ridge",
        Inset = "inset",
        Outset = "outset",
        Initial = "initial",
        Inherit = "inherit"
}
export class AppearanceObject {
        IsEmpty: boolean;
        isModified: boolean;
        StylePropertyBag: {};
        /**
            * Specifies the alignment of flexible container's items within the flex container.
            */
        AlignContent: string;
        /**
            * Specifies the default alignment for items within the flex container.
            */
        AlignItems: string;
        /**
            * Specifies the alignment for selected items within the flex container.
            */
        AlignSelf: string;
        /**
            * Specifies the keyframe-based animations.
            */
        Animation: string;
        /**
            * Specifies when the animation will start.
            */
        AnimationDelay: string;
        /**
            * Specifies whether the animation should play in reverse on alternate cycles or not.
            */
        AnimationDirection: string;
        /**
            * Specifies the number of seconds or milliseconds an animation should take to complete one cycle.
            */
        AnimationDuration: string;
        /**
            * Specifies how a CSS animation should apply styles to its target before and after it is executing.
            */
        AnimationFillMode: string;
        /**
            * Specifies the number of times an animation cycle should be played before stopping.
            */
        AnimationIterationCount: string;
        /**
            * Specifies the name of @keyframes defined animations that should be applied to the selected element.
            */
        AnimationName: string;
        /**
            * Specifies whether the animation is running or paused.
            */
        AnimationPlayState: string;
        /**
            * Specifies how a CSS animation should progress over the duration of each cycle.
            */
        AnimationTimingFunction: string;
        /**
            * Specifies whether or not the "back" side of a transformed element is visible when facing the user.
            */
        BackfaceVisibility: string;
        /**
            * Defines a variety of background properties within one declaration.
            */
        Background: string;
        /**
            * Specify whether the background image is fixed in the viewport or scrolls.
            */
        BackgroundAttachment: string;
        /**
            * Specifies the painting area of the background.
            */
        BackgroundClip: string;
        /**
            * Defines an element's background color.
            */
        BackgroundColor: string;
        /**
            * Defines an element's background image.
            */
        BackgroundImage: string;
        /**
            * Specifies the positioning area of the background images.
            */
        BackgroundOrigin: string;
        /**
            * Defines the origin of a background image.
            */
        BackgroundPosition: string;
        /**
            * Specify whether/how the background image is tiled.
            */
        BackgroundRepeat: string;
        /**
            * Specifies the size of the background images.
            */
        BackgroundSize: string;
        /**
            * Sets the width, style, and color for all four sides of an element's border.
            */
        Border: string;
        /**
            * Sets the width, style, and color of the bottom border of an element.
            */
        BorderBottom: string;
        /**
            * Sets the color of the bottom border of an element.
            */
        BorderBottomColor: string;
        /**
            * Defines the shape of the bottom-left border corner of an element.
            */
        BorderBottomLeftRadius: string;
        /**
            * Defines the shape of the bottom-right border corner of an element.
            */
        BorderBottomRightRadius: string;
        /**
            * Sets the style of the bottom border of an element.
            */
        BorderBottomStyle: string;
        /**
            * Sets the width of the bottom border of an element.
            */
        BorderBottomWidth: string;
        /**
            * Specifies whether table cell borders are connected or separated.
            */
        BorderCollapse: string;
        /**
            * Sets the color of the border on all the four sides of an element.
            */
        BorderColor: string;
        /**
            * Specifies how an image is to be used in place of the border styles.
            */
        BorderImage: string;
        /**
            * Specifies the amount by which the border image area extends beyond the border box.
            */
        BorderImageOutset: string;
        /**
            * Specifies whether the image-border should be repeated, rounded or stretched.
            */
        BorderImageRepeat: string;
        /**
            * Specifies the inward offsets of the image-border.
            */
        BorderImageSlice: string;
        /**
            * Specifies the location of the image to be used as a border.
            */
        BorderImageSource: string;
        /**
            * 	Specifies the width of the image-border.
            */
        BorderImageWidth: string;
        /**
            * Sets the width, style, and color of the left border of an element.
            */
        BorderLeft: string;
        /**
            * Sets the color of the left border of an element.
            */
        BorderLeftColor: string;
        /**
            * Sets the style of the left border of an element.
            */
        BorderLeftStyle: string;
        /**
            * Sets the width of the left border of an element.
            */
        BorderLeftWidth: string;
        /**
            * Defines the shape of the border corners of an element.
            */
        BorderRadius: string;
        /**
            * Sets the width, style, and color of the right border of an element.
            */
        BorderRight: string;
        /**
            * Sets the color of the right border of an element.
            */
        BorderRightColor: string;
        /**
            * Sets the style of the right border of an element.
            */
        BorderRightStyle: string;
        /**
            * Sets the width of the right border of an element.
            */
        BorderRightWidth: string;
        /**
            * Sets the spacing between the borders of adjacent table cells.
            */
        BorderSpacing: string;
        /**
            * Sets the style of the border on all the four sides of an element.
            */
        BorderStyle: string;
        /**
            * Sets the width, style, and color of the top border of an element.
            */
        BorderTop: string;
        /**
            * Sets the color of the top border of an element.
            */
        BorderTopColor: string;
        /**
            * Defines the shape of the top-left border corner of an element.
            */
        BorderTopLeftRadius: string;
        /**
            * Defines the shape of the top-right border corner of an element.
            */
        BorderTopRightRadius: string;
        /**
            * Sets the style of the top border of an element.
            */
        BorderTopStyle: string;
        /**
            * Sets the width of the top border of an element.
            */
        BorderTopWidth: string;
        /**
            * Sets the width of the border on all the four sides of an element.
            */
        BorderWidth: string;
        /**
            * Specify the location of the bottom edge of the positioned element.
            */
        Bottom: string;
        /**
            * Applies one or more drop-shadows to the element's box.
            */
        BoxShadow: string;
        /**
            * Alter the default CSS box model.
            */
        BoxSizing: string;
        /**
            * Specify the position of table's caption.
            */
        CaptionSide: string;
        /**
            * Specifies the placement of an element in relation to floating elements.
            */
        Clear: string;
        /**
            * Defines the clipping region.
            */
        Clip: string;
        /**
            * Defines the clipping region.
            */
        ClipPath: string;
        /**
        * Defines the filter.
        */
        Filter: string;
        /**
            * Specify the color of the text of an element.
            */
        Color: string;
        Gap: string;
        /**
            * Specifies the number of columns in a multi-column element.
            */
        ColumnCount: string;
        /**
            * Specifies how columns will be filled.
            */
        ColumnFill: string;
        /**
            * Specifies the gap between the columns in a multi-column element.
            */
        ColumnGap: string;
        /**
            * Specifies a straight line, or "rule", to be drawn between each column in a multi-column element.
            */
        ColumnRule: string;
        /**
            * Specifies the color of the rules drawn between columns in a multi-column layout.
            */
        ColumnRuleColor: string;
        /**
            * Specifies the style of the rule drawn between the columns in a multi-column layout.
            */
        ColumnRuleStyle: string;
        /**
            * Specifies the width of the rule drawn between the columns in a multi-column layout.
            */
        ColumnRuleWidth: string;
        /**
            * Specifies how many columns an element spans across in a multi-column layout.
            */
        ColumnSpan: string;
        /**
            * Specifies the optimal width of the columns in a multi-column element.
            */
        ColumnWidth: string;
        /**
            * A shorthand property for setting column-width and column-count properties.
            */
        Columns: string;
        /**
            * Inserts generated content.
            */
        Content: string;
        /**
            * Increments one or more counter values.
            */
        CounterIncrement: string;
        /**
            * Creates or resets one or more counters.
            */
        CounterReset: string;
        /**
            * Specify the type of cursor.
            */
        Cursor: string;
        /**
            * Define the text direction/writing direction.
            */
        Direction: string;
        /**
            * Specifies how an element is displayed onscreen.
            */
        Display: string;
        /**
            * Show or hide borders and backgrounds of empty table cells.
            */
        EmptyCells: string;
        /**
            * Specifies the components of a flexible length.
            */
        flex: string;
        /**
            * Specifies the initial main size of the flex item.
            */
        FlexBasis: string;
        /**
            * Specifies the direction of the flexible items.
            */
        FlexDirection: string;
        /**
            * A shorthand property for the flex-direction and the flex-wrap properties.
            */
        FlexFlow: string;
        /**
            * Specifies how the flex item will grow relative to the other items inside the flex container.
            */
        FlexGrow: string;
        /**
            * Specifies how the flex item will shrink relative to the other items inside the flex container.
            */
        FlexShrink: string;
        /**
            * Specifies whether the flexible items should wrap or not.
            */
        FlexWrap: string;
        /**
            * Specifies whether or not a box should float.
            */
        Float: string;
        /**
            * Defines a variety of font properties within one declaration.
            */
        Font: string;
        /**
            * Defines a list of fonts for element.
            */
        FontFamily: string;
        /**
            * Defines the font size for the text.
            */
        FontSize: string;
        /**
            * Preserves the readability of text when font fallback occurs.
            */
        FontSizeAdjust: string;
        /**
            * Selects a normal, condensed, or expanded face from a font.
            */
        FontStretch: string;
        /**
            * Defines the font style for the text.
            */
        FontStyle: string;
        /**
            * Specify the font variant.
            */
        FontVariant: string;
        /**
            * Specify the font weight of the text.
            */
        FontWeight: string;
        /**
            * Specify the height of an element.
            */
        Height: string;
        /**
            * Specifies how flex items are aligned along the main axis of the flex container after any flexible lengths and auto margins have been resolved.
            */
        JustifyContent: string;
        /**
    * Specifies how flex items are aligned along the main axis of the flex container after any flexible lengths and auto margins have been resolved.
    */
        JustifyItems: string;
        /**
            * Specify the location of the left edge of the positioned element.
            */
        Left: string;
        /**
            * Sets the extra spacing between letters.
            */
        LetterSpacing: string;
        /**
            * Sets the height between lines of text.
            */
        LineHeight: string;
        /**
            * Defines the display style for a list and list elements.
            */
        ListStyle: string;
        /**
            * Specifies the image to be used as a list-item marker.
            */
        ListStyleImage: string;
        /**
            * Specifies the position of the list-item marker.
            */
        ListStylePosition: string;
        /**
            * Specifies the marker style for a list-item.
            */
        ListStyleType: string;
        /**
            * Sets the margin on all four sides of the element.
            */
        Margin: string;
        /**
            * Sets the bottom margin of the element.
            */
        MarginBottom: string;
        /**
            * Sets the left margin of the element.
            */
        MarginLeft: string;
        /**
            * Sets the right margin of the element.
            */
        MarginRight: string;
        /**
            * Sets the top margin of the element.
            */
        MarginTop: string;
        /**
            * Specify the maximum height of an element.
            */
        MaxHeight: string;
        /**
            * Specify the maximum width of an element.
            */
        MaxWidth: string;
        /**
            * Specify the minimum height of an element.
            */
        MinHeight: string;
        /**
            * Specify the minimum width of an element.
            */
        MinWidth: string;
        /**
            * Specifies the transparency of an element.
            */
        Opacity: string;
        /**
            * Specifies the order in which a flex items are displayed and laid out within a flex container.
            */
        Order: string;
        /**
            * Sets the width, style, and color for all four sides of an element's outline.
            */
        Outline: string;
        /**
            * Sets the color of the outline.
            */
        OutlineColor: string;
        /**
            * Set the space between an outline and the border edge of an element.
            */
        OutlineOffset: string;
        /**
            * Sets a style for an outline.
            */
        OutlineStyle: string;
        /**
            * Sets the width of the outline.
            */
        OutlineWidth: string;
        /**
            * Specifies the treatment of content that overflows the element's box.
            */
        Overflow: string;
        /**
            * Specifies the treatment of content that overflows the element's box horizontally.
            */
        OverflowX: string;
        /**
            * Specifies the treatment of content that overflows the element's box vertically.
            */
        OverflowY: string;
        /**
            * Sets the padding on all four sides of the element.
            */
        Padding: string;
        /**
            * Sets the padding to the bottom side of an element.
            */
        PaddingBottom: string;
        /**
            * Sets the padding to the left side of an element.
            */
        PaddingLeft: string;
        /**
            * Sets the padding to the right side of an element.
            */
        PaddingRight: string;
        /**
            * Sets the padding to the top side of an element.
            */
        PaddingTop: string;
        /**
            * Insert a page breaks after an element.
            */
        PageBreakAfter: string;
        /**
            * Insert a page breaks before an element.
            */
        PageBreakBefore: string;
        /**
            * Insert a page breaks inside an element.
            */
        PageBreakInside: string;
        /**
            * Defines the perspective from which all child elements of the object are viewed.
            */
        Perspective: string;
        /**
            * Defines the origin (the vanishing point for the 3D space) for the perspective property.
            */
        PerspectiveOrigin: string;
        /**
            * Specifies how an element is positioned.
            */
        Position: string;
        /**
            * Specifies quotation marks for embedded quotations.
            */
        Quotes: string;
        /**
            * Specifies whether or not an element is resizable by the user.
            */
        Resize: string;
        /**
            * Specify the location of the right edge of the positioned element.
            */
        Right: string;
        /**
            * Specifies the length of the tab character.
            */
        TabSize: string;
        /**
            * Specifies a table layout algorithm.
            */
        TableLayout: string;
        /**
            * Sets the horizontal alignment of inline content.
            */
        TextAlign: string;
        /**
            * Specifies how the last line of a block or a line right before a forced line break is aligned when text-align is justify.
            */
        TextAlignLast: string;
        /**
            * Specifies the decoration added to text.
            */
        TextDecoration: string;
        /**
            * Specifies the color of the text-decoration-line.
            */
        TextDecorationColor: string;
        /**
            * Specifies what kind of line decorations are added to the element.
            */
        TextDecorationLine: string;
        /**
            * Specifies the style of the lines specified by the text-decoration-line property
            */
        TextDecorationStyle: string;
        /**
            * Indent the first line of text.
            */
        TextIndent: string;
        /**
            * Specifies the justification method to use when the text-align property is set to justify.
            */
        TextJustify: string;
        /**
            * Specifies how the text content will be displayed, when it overflows the block containers.
            */
        TextOverflow: string;
        /**
            * Applies one or more shadows to the text content of an element.
            */
        TextShadow: string;
        /**
            * Transforms the case of the text.
            */
        TextTransform: string;
        /**
            * Specify the location of the top edge of the positioned element.
            */
        Top: string;
        /**
            * Applies a 2D or 3D transformation to an element.
            */
        Transform: string;
        /**
            * Defines the origin of transformation for an element.
            */
        TransformOrigin: string;
        /**
            * Specifies how nested elements are rendered in 3D space.
            */
        TransformStyle: string;
        /**
            * Defines the transition between two states of an element.
            */
        Transition: string;
        /**
            * Specifies when the transition effect will start.
            */
        TransitionDelay: string;
        /**
            * Specifies the number of seconds or milliseconds a transition effect should take to complete.
            */
        TransitionDuration: string;
        /**
            * Specifies the names of the CSS properties to which a transition effect should be applied.
            */
        TransitionProperty: string;
        /**
            * Specifies the speed curve of the transition effect.
            */
        TransitionTimingFunction: string;
        /**
            * Sets the vertical positioning of an element relative to the current text baseline.
            */
        VerticalAlign: string;
        /**
            * Specifies whether or not an element is visible.
            */
        Visibility: string;
        /**
            * Specifies how white space inside the element is handled.
            */
        WhiteSpace: string;
        /**
            * 	Specify the width of an element.
            */
        Width: string;
        Inset: string;
        /**
            * 	Specifies how to break lines within words.
            */
        WordBreak: string;
        /**
            * Sets the spacing between words.
            */
        WordSpacing: string;
        /**
            * Specifies whether to break words when the content overflows the boundaries of its container.
            */
        WordWrap: string;
        PointerEvents: string;
        /**
            * Specifies a layering or stacking order for positioned elements.
            */
        ZIndex: string;
        WritingMode: string;
        WebkitFontSmoothing: string;
        WebkitLineClamp: string;
        WebkitBoxOrient: string;
        GridTemplateRows: string;
        constructor(obj: UIView);
        GetStyleObject(): any;
        SetStyleObject(styleObject: any): void;
        CloneStyleObject(): void;
        Assign(other: AppearanceObject): void;
        Hash: number;
        ToString(): string;
}

export interface StyleAttribute {
    default?: string | ColorClass;
    hover?: string | ColorClass;
    active?: string | ColorClass;
    disabled?: string | ColorClass;
    focus?: string | ColorClass;
    before?: string | ColorClass;
    after?: string | ColorClass;
}

type float = number;
export class ColorClass {
    color: string;
    constructor(color: string);
    opacity(value: float): this;
    lighten(volume?: float): this;
    darken(volume?: float): this;
    toString(): string;
}
export {};

type TooltipPositions = any;
export class HStackClass extends UIView {
    /** @internal */
    vp_TooltipPosition: TooltipPositions;
    tooltipPosition(value: TooltipPositions): this;
    /** @internal */
    vp_Spacing: string;
    /** @internal */
    vp_Alignment: string;
    /** @internal */
    vp_Chidren: UIView[] | Function;
    /** @internal */
    vp_OnClickAway: Function;
    onClickAway(value: Function): this;
    children(...value: UIView[]): this;
    constructor();
    /** @internal */
    spacing(value: number): this;
    /** @internal */
    spacing(value: string): this;
    /** @internal */
    alignment(value: AlignmentType): this;
    /** @internal */
    vp_Draggable: boolean;
    draggable(value: boolean): this;
    render(): React.JSX.Element;
}
export {};

type TooltipPositions = any;
export class VStackClass extends UIView {
    /** @internal */
    vp_TooltipPosition: TooltipPositions;
    tooltipPosition(value: TooltipPositions): this;
    /** @internal */
    vp_Spacing: string;
    /** @internal */
    vp_Alignment: string;
    /** @internal */
    vp_Chidren: (UIView | ReactNode)[];
    children(...value: (UIView | ReactNode)[]): this;
    /** @internal */
    vp_DragableItems: boolean;
    dragableItems(value: boolean): this;
    constructor();
    /** @internal */
    spacing(value: number): this;
    /** @internal */
    spacing(value: string): this;
    /** @internal */
    alignment(value: AlignmentType): this;
    /** @internal */
    vp_Draggable: boolean;
    draggable(value: boolean): this;
    render(): React.JSX.Element;
}
export {};

export enum RenderingTypes {
    Normal = 1,
    Markdown = 2,
    Html = 3
}
export enum TextAlignment {
    center = 0,
    leading = 1,
    trailing = 2
}
export class TextClass extends UIView {
    /** @internal */
    MultilineTextAlignment: TextAlignment;
    /** @internal */
    RenderingType: RenderingTypes;
    /** @internal */
    HtmlFor: string;
    /** @internal */
    TextAlign: string;
    /** @internal */
    WhiteSpace: string;
    /** @internal */
    TextOverflow: string;
    /** @internal */
    SearchWords: string[];
    /** @internal */
    vp_Text: string;
    /** @internal */
    vp_EllipsisMaxLines: number;
    constructor();
    text(buttonLabel: string): this;
    textAlign(value: string): this;
    renderingType(type: RenderingTypes): this;
    multilineTextAlignment(value: TextAlignment): this;
    whiteSpace(value: string): this;
    textOverflow(value: string): this;
    searchWords(value: string[]): this;
    ellipsisMaxLines(value: number): this;
    render(): React.JSX.Element;
}

export function Fragment(...children: UIView[]): FragmentClass;

export class FragmentClass extends UIView {
    /** @internal */
    vp_Children: UIView[];
    children(value: UIView[]): this;
    render(): React.JSX.Element;
}

export type ButtonTemplate = (...subViews: UIView[]) => ButtonClass;
export function Button(...subViews: UIView[]): ButtonClass;
export function UIButton(...subViews: UIView[]): ButtonClass;

export class ButtonClass extends UIView implements IButtonProperties {
    /** @internal */
    vp_Label: string;
    label(value: string): this;
    /** @internal */
    vp_Loading: boolean;
    loading(value: boolean): this;
    /** @internal */
    vp_Kind: ButtonType;
    kind(value: ButtonType): this;
    /** @internal */
    vp_Size: ButtonSize;
    size(value: ButtonSize): this;
    /** @internal */
    vp_Color: ColorType;
    color(value: ColorType): this;
    /** @internal */
    vp_Children: UIView[];
    children(...value: UIView[]): this;
    constructor();
    render(): React.JSX.Element;
}

export enum ButtonType {
    PRIMARY = "primary",
    SECONDARY = "secondary",
    TERTIARY = "tertiary"
}
export enum ButtonSize {
    SMALL = "small",
    MEDIUM = "medium",
    LARGE = "large",
    XXS = "xxs",
    XS = "xs"
}
export type ColorType = 'primary' | 'secondary' | 'danger' | 'success';
export interface IButtonProperties extends IViewProperties {
    vp_Label: string;
    vp_Loading: boolean;
    vp_Kind: ButtonType;
    vp_Size: ButtonSize;
    vp_Color: ColorType;
    vp_Children: UIView[];
}

export function TextField(): TextFieldClass;
export function TuTextField(): TextFieldClass;

export enum MaskTypes {
    None = 0,
    Number = 1
}
export class TextFieldClass extends UIView {
    /** @internal */
    vp_Value: string;
    value(value: string): this;
    /** @internal */
    vp_DefaultValue: string;
    defaultValue(value: string): this;
    /** @internal */
    vp_Placeholder: string;
    placeholder(value: string): this;
    /** @internal */
    vp_FormField: {
        name: string;
        rules: ValidateRule[];
    };
    formField(name: string, rules: ValidateRule[]): this;
    /** @internal */
    vp_Multiline: boolean;
    multiline(value: boolean): this;
    /** @internal */
    vp_Autofocus: boolean;
    autofocus(value: boolean): this;
    /** @internal */
    vp_OnChange: Function;
    onChange(value: Function): this;
    vp_Label: string;
    label(value: string): this;
    vp_LabelTemplate: (label: string) => UIView;
    labelTemplate(value: (label: string) => UIView): this;
    /** @internal */
    vp_MaskType: MaskTypes;
    maskType(value: MaskTypes): this;
    /** @internal */
    vp_OnInput: Function;
    onInput(value: Function): this;
    /** @internal */
    vp_OnSelectionchange: Function;
    onSelectionchange(value: Function): this;
    constructor();
    render(): React.JSX.Element;
}

export function SecureField(): SecureFieldClass;

export class SecureFieldClass extends UIView {
    /** @internal */
    vp_Value: string;
    value(value: string): this;
    /** @internal */
    vp_Placeholder: string;
    placeholder(value: string): this;
    /** @internal */
    vp_FormField: {
        name: string;
        rules: ValidateRule[];
    };
    formField(name: string, rules: ValidateRule[]): this;
    /** @internal */
    vp_Multiline: boolean;
    multiline(value: boolean): this;
    /** @internal */
    vp_Autofocus: boolean;
    autofocus(value: boolean): this;
    /** @internal */
    vp_OnChange: Function;
    onChange(value: Function): this;
    vp_Label: string;
    label(value: string): this;
    vp_LabelTemplate: (label: string) => UIView;
    labelTemplate(value: (label: string) => UIView): this;
    constructor();
    render(): React.JSX.Element;
}

export type DropDownItemFunction = (selectedItemTemplate: (option: any) => UIView) => DropdownClass;
export function Dropdown(): DropdownClass;
export function Dropdown(itemTemplate: (option: any) => UIView): DropDownItemFunction;

export class DropdownClass extends UIView {
    /** @internal */
    vp_Label: string;
    label(value: string): this;
    /** @internal */
    vp_DefaultValue: string;
    defaultValue(value: string): this;
    /** @internal */
    vp_Resource: string;
    resource(value: string): this;
    /** @internal */
    vp_Filter: any;
    filter(value: any): this;
    /** @internal */
    vp_FloatLabel: boolean;
    floatlabel(value: boolean): this;
    /** @internal */
    vp_PlaceHolder: string;
    placeHolder(value: string): this;
    /** @internal */
    vp_AllowFiltering: boolean;
    allowFiltering(value: boolean): this;
    vp_itemTemplate: (option: any) => UIView;
    itemTemplate(value: (option: any) => UIView): this;
    vp_emptyTemplate: () => UIView;
    emptyTemplate(value: () => UIView): this;
    vp_selectedItemTemplate: (option: any) => UIView;
    selectedItemTemplate(value: (option: any) => UIView): this;
    vp_fields: FieldSettingsModel;
    fields(value: FieldSettingsModel): this;
    /** @internal */
    vp_Value: string;
    value(value: string): this;
    /** @internal */
    vp_Model: object[];
    model(value: object[]): this;
    dataSource(value: object[]): this;
    /** @internal */
    vp_Placeholder: string;
    placeholder(value: string): this;
    /** @internal */
    vp_FormField: {
        name: string;
        rules: ValidateRule[];
    };
    formField(name: string, rules: ValidateRule[]): this;
    /** @internal */
    vp_OnChange: Function;
    onChange(value: Function): this;
    render(): React.JSX.Element;
}

export interface FieldSettingsModel {
    /**
         * Maps the text column from data table for each list item
         *
         * @default null
         */
    text?: string;
    /**
         * Maps the value column from data table for each list item
         *
         * @default null
         */
    value?: string;
    /**
         * Maps the icon class column from data table for each list item.
         *
         * @default null
         */
    iconCss?: string;
    /**
         * Group the list items with it's related items by mapping groupBy field.
         *
         * @default null
         */
    groupBy?: string;
    /**
         * Allows additional attributes such as title, disabled, etc., to configure the elements
         * in various ways to meet the criteria.
         *
         * @default null
         */
    htmlAttributes?: string;
}

export function UIImage(src: string): UIImageClass;

export class UIImageClass extends UIView {
    /** @internal */
    vp_Src: string;
    src(value: string): this;
    /** @internal */
    vp_Img: HTMLImageElement;
    img(value: HTMLImageElement): this;
    /** @internal */
    vp_ImageWidth: string;
    imageWidth(value: number | string): this;
    /** @internal */
    vp_ImageHeight: string;
    imageHeight(value: number | string): this;
    /** @internal */
    vp_ImageBorder: string;
    imageBorder(value: string): this;
    constructor();
    render(): React.JSX.Element;
}

export function UIViewBuilder(content: () => UIView): UIViewBuilderClass;

export class UIViewBuilderClass extends UIView {
    vp_Content: () => UIView;
    _content(value: () => UIView): this;
    constructor();
    render(): React.JSX.Element;
}

export function UIFileUpload(...content: UIView[]): UIFileUploadClass;

export interface IUploadFileReady {
    GetFileContentAsString(): string;
    fileName: string;
    fileExt: string;
    fileAsByteArray: any;
    file: any;
}
export class UIFileUploadClass extends UIView {
    vp_OnFileReady: (value: IUploadFileReady) => void;
    onFileReady(value: (param: IUploadFileReady) => void): this;
    vp_AllowedExtensions: string;
    allowedExtensions(value: string): this;
    /** @internal */
    vp_Children: UIView[];
    children(...value: UIView[]): this;
    constructor();
    render(): React.JSX.Element;
}

export function Icon(icon: any): IconClass;

export class IconClass extends UIView {
    /** @internal */
    vp_Icon: string | any;
    icon(value: string | any): this;
    /** @internal */
    vp_Icon2: string | any;
    icon2(value: string | any): this;
    /** @internal */
    vp_Size: string | number;
    size(value: string | number): this;
    /** @internal */
    vp_IconType: string;
    iconType(value: string): this;
    constructor();
    render(): React.JSX.Element;
}

export class ReactViewClass extends UIView {
    vp_Frame: boolean;
    frame(value: boolean): this;
    vp_ReactNode: ReactNode;
    reactNode(value: ReactNode): this;
    render(): React.JSX.Element;
}

export function VDivider(): DividerClass;
export function HDivider(): DividerClass;

export class DividerClass extends UIView {
    constructor();
    render(): React.JSX.Element;
}

export function Spinner(): UISpinnerClass;

export enum LoaderSizes {
    XS = 16,
    SMALL = 24,
    MEDIUM = 40,
    LARGE = 64
}
export class UISpinnerClass extends UIView {
    /** @internal */
    vp_Size: LoaderSizes;
    size(value: LoaderSizes): this;
    /** @internal */
    vp_HeaderTemplate: UIView;
    headerTemplate(value: UIView): this;
    constructor();
    render(): React.JSX.Element;
}

export function UINavigate(path: string): UINavigateClass;

export class UINavigateClass extends UIView {
    /** @internal */
    vp_To: string;
    to(value: string): this;
    render(): React.JSX.Element;
}

export function UIRouteOutlet(): UIRouteOutletClass;

export class UIRouteOutletClass extends UIView {
    render(): React.JSX.Element;
}

interface IControlProperties {
    control: UIRouteOutletClass;
}
function UIRouteOutletRenderer({ control }: IControlProperties): React.JSX.Element;
export default UIRouteOutletRenderer;

export type ControllerConstructor = new (props: any) => UIController;
export type UIRouteFunction = (path: string, routeController: ControllerConstructor) => UIRouteClass;
export function UIRoute(path: string, routeController: ControllerConstructor): UIRouteClass;

export class UIRouteClass extends UIView {
    /** @internal */
    vp_RoutePath: string;
    routePath(value: string): this;
    /** @internal */
    vp_IsIndex: boolean;
    isIndex(value: boolean): this;
    /** @internal */
    vp_RouteController: ControllerConstructor;
    routeController(value: ControllerConstructor): this;
    /** @internal */
    vp_Chidren: UIView[];
    children(...value: UIView[]): this;
    /** @internal */
    vp_RedirectTo: string;
    redirectTo(value: string): this;
    render(): React.JSX.Element;
}

export interface IControlProperties {
    control: UIRouteClass;
}
function UIRouteRenderer({ control }: IControlProperties): React.JSX.Element;
export default UIRouteRenderer;

type FunctionUIRouteLink = (...views: UIView[]) => UIRouteLinkClass;
export function UIRouteLink(): UIRouteLinkClass;
export function UIRouteLink(path: string, state?: any): FunctionUIRouteLink;
export {};

export class UIRouteLinkClass extends UIView {
    /** @internal */
    vp_Link: string;
    link(value: string): this;
    /** @internal */
    vp_State: object;
    state(value: object): this;
    /** @internal */
    vp_Chidren: UIView[];
    children(...value: UIView[]): this;
    render(): React.JSX.Element;
}

interface IControlProperties {
    control: UIRouteLinkClass;
}
function UIRouteLinkRenderer({ control }: IControlProperties): React.JSX.Element;
export default UIRouteLinkRenderer;

export function UIRoutes(...routes: UIRouteClass[]): UIRoutesClass;

export class UIRoutesClass extends UIView {
    /** @internal */
    vp_Link: string;
    link(value: string): this;
    /** @internal */
    vp_State: object;
    state(value: object): this;
    /** @internal */
    vp_Chidren: UIRouteClass[];
    children(...value: UIRouteClass[]): this;
    constructor();
    render(): React.JSX.Element;
}

interface IControlProperties {
    control: UIRoutesClass;
}
function UIRoutesRenderer({ control }: IControlProperties): React.JSX.Element;
export default UIRoutesRenderer;

export interface IViewProperties {
    vp_OnClick: Function;
}

export const UIFormContext: React.Context<any>;
export const UIControllerContext: React.Context<any>;
export const useFormController: () => UIFormController;
export const useController: () => UIController;
type int = number;
export function UIControllerProxy({ children, controller }: {
    children: any;
    controller: any;
}): React.JSX.Element;
export abstract class ValidateRule {
    Field: IField;
    value: any;
    ErrorMessage: string;
    constructor(errorMessage: string);
    setField(field: IField): void;
    setFieldValue(value: any): void;
    abstract validate(): boolean;
}
export class RequiredRule extends ValidateRule {
    validate(): boolean;
}
export class RegExRule extends ValidateRule {
    constructor(regEx: RegExp, errorMessage: string);
    validate(): boolean;
}
export class CustomRule extends ValidateRule {
    constructor(func: Function, errorMessage: string);
    validate(): boolean;
}
export class MaxLengthRule extends ValidateRule {
    constructor(maxLength: int, errorMessage: string);
    validate(): boolean;
}
export interface IFieldState {
    errors?: string[];
    invalid?: boolean;
    isDirty?: boolean;
    isTouched?: boolean;
}
export interface IFieldOptions {
    rules: ValidateRule[];
}
export interface IField {
    state: IFieldState;
    options: IFieldOptions;
}
export const defaultField: IField;
export class UIFormController extends UIController {
    IsLoaded: boolean;
    isValid: boolean;
    constructor(props: any);
    validateForm(): any;
    protected OnSubmit(data: any): void;
    Submit(): void;
    ResetForm(): void;
    ClearErrors(): void;
    SetValue(name: string, value: any, silent?: boolean, isDirty?: boolean): void;
    GetValue(name: string): any;
    GetFormData(): any;
    GetFieldState(name: string): IFieldState;
    SetFieldState(name: string, state: IFieldState): void;
    SetFieldTouch(name: string, isTouched: boolean): IFieldState;
    register(name: string, rules: ValidateRule[], defaultValue?: any): void;
    render(): React.ReactNode;
}
export {};

export type FunctionBody = (...views: UIView[]) => BodyClass;
export function TBody(): BodyClass;
export function TBody(...views: (UIView)[]): BodyClass;
export function TBody(value: BodyParams): FunctionBody;

export interface BodyParams {
}
export class BodyClass extends UIView {
    /** @internal */
    vp_Children: UIView[];
    children(...value: UIView[]): this;
    render(): React.JSX.Element;
}

export function UITable(...columns: TableColumnClass[]): TableClass;

export class TableClass extends UIView {
    /** @internal */
    vp_ShowHeader: boolean;
    showHeader(value: boolean): this;
    /** @internal */
    vp_Spacing: string;
    /** @internal */
    vp_Alignment: string;
    /** @internal */
    vp_Header: TableColumnClass[];
    /** @internal */
    setHeader(...columns: TableColumnClass[]): this;
    /** @internal */
    vp_Body: BodyClass;
    /** @internal */
    setBody(body: BodyClass): this;
    /** @internal */
    vp_Value: any[];
    value(value: any[]): this;
    /** @internal */
    vp_HeaderAppearance: AppearanceClass;
    headerAppearance(value: AppearanceClass): this;
    /** @internal */
    vp_RowAppearance: AppearanceClass;
    rowAppearance(value: AppearanceClass): this;
    constructor();
    render(): React.JSX.Element;
}

export type FunctionHeader = (...views: UIView[]) => TableColumnClass;
export type FunctionRow = (rowFunction: (dataRow: any) => UIView) => TableColumnClass;
export function TableColumn(...views: UIView[]): FunctionRow;

export class TableColumnClass extends UIView {
    /** @internal */
    vp_HeaderView: UIView;
    setHeaderView(value: UIView): this;
    /** @internal */
    vp_RowFunction: (dataRow: any) => UIView;
    setRowFunction(value: (dataRow: any) => UIView): this;
    /** @internal */
    vp_HeaderWidth: string;
    headerWidth(value: string): this;
    /** @internal */
    vp_TableHeaderHeight: string;
    headerHeight(value: string): this;
    /** @internal */
    vp_Children: UIView[];
    children(...value: UIView[]): this;
    render(): React.JSX.Element;
}

type int = number;
export class AppearanceClass {
    Appearance: AppearanceObject;
    HoverAppearance: AppearanceObject;
    FocusAppearance: AppearanceObject;
    ActiveAppearance: AppearanceObject;
    BeforeAppearance: AppearanceObject;
    constructor();
    zIndex(value: int): this;
    variable(name: string, value: StyleAttribute): this;
    visible(value: boolean): this;
    position(value: PositionTypes): this;
    position(size: int): this;
    position(size: string): this;
    left(value: string): this;
    top(value: string): this;
    right(value: string): this;
    bottom(value: string): this;
    transform(value: string): this;
    rotate(value: string): this;
    clipPath(value: string): this;
    filter(value: string): this;
    font(font: IFont): this;
    textAlign(value: TextAligns): this;
    textTransform(value: TextTransforms): this;
    fontFamily(size: string): this;
    fontSmoothing(value: (view: UIView) => void): this;
    fontSize(value: (view: UIView) => void): this;
    fontSize(size: int): this;
    fontSize(size: string): this;
    fontWeight(weight: FontWeightModifierTypes): this;
    lineHeight(size: int): this;
    lineHeight(size: string): this;
    grow(): this;
    width(): this;
    width(value: int): this;
    width(value: string): this;
    minWidth(value: string): this;
    maxWidth(value: string): this;
    height(): this;
    height(value: int): this;
    height(value: string): this;
    minHeight(value: string): this;
    maxHeight(value: string): this;
    foregroundColor(value: ColorClass): this;
    foregroundColor(value: StyleAttribute): this;
    foregroundColor(color: string): this;
    foregroundColor(condition: boolean, trueValue: string, falseValue: string): this;
    backgroundImage(value: StyleAttribute): this;
    backgroundImage(value: string): this;
    backgroundColor(value: StyleAttribute): this;
    backgroundColor(value: string): this;
    background(value: ColorClass): this;
    background(value: StyleAttribute): this;
    background(color: string): this;
    background(condition: boolean, trueValue: string, falseValue: string): this;
    cursor(value: string): this;
    alignItems(value: string): this;
    alignContent(value: string): this;
    justifyContent(value: string): this;
    cornerRadius(): this;
    cornerRadius(value: CornerRadiusTypes): this;
    cornerRadius(value: string): this;
    cornerRadius(value: int): this;
    outline(value: StyleAttribute): this;
    outline(value: string): this;
    border(value: StyleAttribute): this;
    border(value: string): this;
    borderLeft(value: string): this;
    borderRight(value: string): this;
    borderTop(value: string): this;
    borderBottom(value: string): this;
    wrap(value: string): this;
    basis(value: string): this;
    margin(): this;
    margin(value: string): this;
    margin(value: int): this;
    marginVertical(): this;
    marginVertical(value: string): this;
    marginVertical(value: int): this;
    marginHorizontal(): this;
    marginHorizontal(value: string): this;
    marginHorizontal(value: int): this;
    marginLeft(value: string): this;
    marginRight(value: string): this;
    marginTop(value: string): this;
    marginBottom(value: string): this;
    padding(): this;
    padding(value: string): this;
    padding(type: string, value: string): this;
    padding(value: int): this;
    padding(type: string, value: int): this;
    paddingLeft(value: string): this;
    paddingRight(value: string): this;
    paddingTop(value: string): this;
    paddingBottom(value: string): this;
    overflow(value: string): this;
    overflowX(value: string): this;
    overflowY(value: string): this;
    shadow(value: StyleAttribute): this;
    shadow(value: ShadowTypes): this;
    shadow(value: string): this;
    transition(value: string): this;
    opacity(value: string): this;
    kerning(value: string): this;
}
export function UIAppearance(): AppearanceClass;
export {};

