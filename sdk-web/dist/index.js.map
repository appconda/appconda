{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@appconda/web-sdk/webpack/universalModuleDefinition","webpack://@appconda/web-sdk/./src/client.ts","webpack://@appconda/web-sdk/./src/enums/authentication-factor.ts","webpack://@appconda/web-sdk/./src/enums/authenticator-type.ts","webpack://@appconda/web-sdk/./src/enums/browser.ts","webpack://@appconda/web-sdk/./src/enums/credit-card.ts","webpack://@appconda/web-sdk/./src/enums/execution-method.ts","webpack://@appconda/web-sdk/./src/enums/flag.ts","webpack://@appconda/web-sdk/./src/enums/image-format.ts","webpack://@appconda/web-sdk/./src/enums/image-gravity.ts","webpack://@appconda/web-sdk/./src/enums/o-auth-provider.ts","webpack://@appconda/web-sdk/./src/id.ts","webpack://@appconda/web-sdk/./src/permission.ts","webpack://@appconda/web-sdk/./src/query.ts","webpack://@appconda/web-sdk/./src/role.ts","webpack://@appconda/web-sdk/./src/service.ts","webpack://@appconda/web-sdk/./src/services/account.ts","webpack://@appconda/web-sdk/./src/services/avatars.ts","webpack://@appconda/web-sdk/./src/services/databases.ts","webpack://@appconda/web-sdk/./src/services/functions.ts","webpack://@appconda/web-sdk/./src/services/graphql.ts","webpack://@appconda/web-sdk/./src/services/locale.ts","webpack://@appconda/web-sdk/./src/services/messaging.ts","webpack://@appconda/web-sdk/./src/services/storage.ts","webpack://@appconda/web-sdk/./src/services/teams.ts","webpack://@appconda/web-sdk/webpack/bootstrap","webpack://@appconda/web-sdk/webpack/runtime/define property getters","webpack://@appconda/web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@appconda/web-sdk/webpack/runtime/make namespace object","webpack://@appconda/web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","import { Models } from './models';\nimport { Service } from './service';\n\ntype Payload = {\n    [key: string]: any;\n}\n\ntype Headers = {\n    [key: string]: string;\n}\n\ntype RealtimeResponse = {\n    type: 'error' | 'event' | 'connected' | 'response';\n    data: RealtimeResponseAuthenticated | RealtimeResponseConnected | RealtimeResponseError | RealtimeResponseEvent<unknown>;\n}\n\ntype RealtimeRequest = {\n    type: 'authentication';\n    data: RealtimeRequestAuthenticate;\n}\n\nexport type RealtimeResponseEvent<T extends unknown> = {\n    events: string[];\n    channels: string[];\n    timestamp: number;\n    payload: T;\n}\n\ntype RealtimeResponseError = {\n    code: number;\n    message: string;\n}\n\ntype RealtimeResponseConnected = {\n    channels: string[];\n    user?: object;\n}\n\ntype RealtimeResponseAuthenticated = {\n    to: string;\n    success: boolean;\n    user: object;\n}\n\ntype RealtimeRequestAuthenticate = {\n    session: string;\n}\n\ntype Realtime = {\n    socket?: WebSocket;\n    timeout?: number;\n    url?: string;\n    lastMessage?: RealtimeResponse;\n    channels: Set<string>;\n    subscriptions: Map<number, {\n        channels: string[];\n        callback: (payload: RealtimeResponseEvent<any>) => void\n    }>;\n    subscriptionsCounter: number;\n    reconnect: boolean;\n    reconnectAttempts: number;\n    getTimeout: () => number;\n    connect: () => void;\n    createSocket: () => void;\n    cleanUp: (channels: string[]) => void;\n    onMessage: (event: MessageEvent) => void;\n}\n\nexport type UploadProgress = {\n    $id: string;\n    progress: number;\n    sizeUploaded: number;\n    chunksTotal: number;\n    chunksUploaded: number;\n}\n\nclass AppwriteException extends Error {\n    code: number;\n    response: string;\n    type: string;\n    constructor(message: string, code: number = 0, type: string = '', response: string = '') {\n        super(message);\n        this.name = 'AppwriteException';\n        this.message = message;\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\n\nclass Client {\n    config = {\n        endpoint: 'https://cloud.appconda.io/v1',\n        endpointRealtime: '',\n        project: '',\n        jwt: '',\n        locale: '',\n        session: '',\n    };\n    headers: Headers = {\n        'x-sdk-name': 'Web',\n        'x-sdk-platform': 'client',\n        'x-sdk-language': 'web',\n        'x-sdk-version': '15.0.0',\n        'X-Appconda-Response-Format': '1.5.0',\n    };\n\n    /**\n     * Set Endpoint\n     *\n     * Your project endpoint\n     *\n     * @param {string} endpoint\n     *\n     * @returns {this}\n     */\n    setEndpoint(endpoint: string): this {\n        this.config.endpoint = endpoint;\n        this.config.endpointRealtime = this.config.endpointRealtime || this.config.endpoint.replace('https://', 'wss://').replace('http://', 'ws://');\n\n        return this;\n    }\n\n    /**\n     * Set Realtime Endpoint\n     *\n     * @param {string} endpointRealtime\n     *\n     * @returns {this}\n     */\n    setEndpointRealtime(endpointRealtime: string): this {\n        this.config.endpointRealtime = endpointRealtime;\n\n        return this;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setProject(value: string): this {\n        this.headers['X-Appconda-Project'] = value;\n        this.config.project = value;\n        return this;\n    }\n\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setJWT(value: string): this {\n        this.headers['X-Appconda-JWT'] = value;\n        this.config.jwt = value;\n        return this;\n    }\n\n    /**\n     * Set Locale\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setLocale(value: string): this {\n        this.headers['X-Appconda-Locale'] = value;\n        this.config.locale = value;\n        return this;\n    }\n\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setSession(value: string): this {\n        this.headers['X-Appconda-Session'] = value;\n        this.config.session = value;\n        return this;\n    }\n\n\n    private realtime: Realtime = {\n        socket: undefined,\n        timeout: undefined,\n        url: '',\n        channels: new Set(),\n        subscriptions: new Map(),\n        subscriptionsCounter: 0,\n        reconnect: true,\n        reconnectAttempts: 0,\n        lastMessage: undefined,\n        connect: () => {\n            clearTimeout(this.realtime.timeout);\n            this.realtime.timeout = window?.setTimeout(() => {\n                this.realtime.createSocket();\n            }, 50);\n        },\n        getTimeout: () => {\n            switch (true) {\n                case this.realtime.reconnectAttempts < 5:\n                    return 1000;\n                case this.realtime.reconnectAttempts < 15:\n                    return 5000;\n                case this.realtime.reconnectAttempts < 100:\n                    return 10_000;\n                default:\n                    return 60_000;\n            }\n        },\n        createSocket: () => {\n            if (this.realtime.channels.size < 1) {\n                this.realtime.reconnect = false;\n                this.realtime.socket?.close();\n                return;\n            }\n\n            const channels = new URLSearchParams();\n            channels.set('project', this.config.project);\n            this.realtime.channels.forEach(channel => {\n                channels.append('channels[]', channel);\n            });\n\n            const url = this.config.endpointRealtime + '/realtime?' + channels.toString();\n\n            if (\n                url !== this.realtime.url || // Check if URL is present\n                !this.realtime.socket || // Check if WebSocket has not been created\n                this.realtime.socket?.readyState > WebSocket.OPEN // Check if WebSocket is CLOSING (3) or CLOSED (4)\n            ) {\n                if (\n                    this.realtime.socket &&\n                    this.realtime.socket?.readyState < WebSocket.CLOSING // Close WebSocket if it is CONNECTING (0) or OPEN (1)\n                ) {\n                    this.realtime.reconnect = false;\n                    this.realtime.socket.close();\n                }\n\n                this.realtime.url = url;\n                this.realtime.socket = new WebSocket(url);\n                this.realtime.socket.addEventListener('message', this.realtime.onMessage);\n                this.realtime.socket.addEventListener('open', _event => {\n                    this.realtime.reconnectAttempts = 0;\n                });\n                this.realtime.socket.addEventListener('close', event => {\n                    if (\n                        !this.realtime.reconnect ||\n                        (\n                            this.realtime?.lastMessage?.type === 'error' && // Check if last message was of type error\n                            (<RealtimeResponseError>this.realtime?.lastMessage.data).code === 1008 // Check for policy violation 1008\n                        )\n                    ) {\n                        this.realtime.reconnect = true;\n                        return;\n                    }\n\n                    const timeout = this.realtime.getTimeout();\n                    console.error(`Realtime got disconnected. Reconnect will be attempted in ${timeout / 1000} seconds.`, event.reason);\n\n                    setTimeout(() => {\n                        this.realtime.reconnectAttempts++;\n                        this.realtime.createSocket();\n                    }, timeout);\n                })\n            }\n        },\n        onMessage: (event) => {\n            try {\n                const message: RealtimeResponse = JSON.parse(event.data);\n                this.realtime.lastMessage = message;\n                switch (message.type) {\n                    case 'connected':\n                        const cookie = JSON.parse(window.localStorage.getItem('cookieFallback') ?? '{}');\n                        const session = cookie?.[`a_session_${this.config.project}`];\n                        const messageData = <RealtimeResponseConnected>message.data;\n\n                        if (session && !messageData.user) {\n                            this.realtime.socket?.send(JSON.stringify(<RealtimeRequest>{\n                                type: 'authentication',\n                                data: {\n                                    session\n                                }\n                            }));\n                        }\n                        break;\n                    case 'event':\n                        let data = <RealtimeResponseEvent<unknown>>message.data;\n                        if (data?.channels) {\n                            const isSubscribed = data.channels.some(channel => this.realtime.channels.has(channel));\n                            if (!isSubscribed) return;\n                            this.realtime.subscriptions.forEach(subscription => {\n                                if (data.channels.some(channel => subscription.channels.includes(channel))) {\n                                    setTimeout(() => subscription.callback(data));\n                                }\n                            })\n                        }\n                        break;\n                    case 'error':\n                        throw message.data;\n                    default:\n                        break;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        cleanUp: channels => {\n            this.realtime.channels.forEach(channel => {\n                if (channels.includes(channel)) {\n                    let found = Array.from(this.realtime.subscriptions).some(([_key, subscription] )=> {\n                        return subscription.channels.includes(channel);\n                    })\n\n                    if (!found) {\n                        this.realtime.channels.delete(channel);\n                    }\n                }\n            })\n        }\n    }\n\n    /**\n     * Subscribes to Appconda events and passes you the payload in realtime.\n     * \n     * @param {string|string[]} channels \n     * Channel to subscribe - pass a single channel as a string or multiple with an array of strings.\n     * \n     * Possible channels are:\n     * - account\n     * - collections\n     * - collections.[ID]\n     * - collections.[ID].documents\n     * - documents\n     * - documents.[ID]\n     * - files\n     * - files.[ID]\n     * - executions\n     * - executions.[ID]\n     * - functions.[ID]\n     * - teams\n     * - teams.[ID]\n     * - memberships\n     * - memberships.[ID]\n     * @param {(payload: RealtimeMessage) => void} callback Is called on every realtime update.\n     * @returns {() => void} Unsubscribes from events.\n     */\n    subscribe<T extends unknown>(channels: string | string[], callback: (payload: RealtimeResponseEvent<T>) => void): () => void {\n        let channelArray = typeof channels === 'string' ? [channels] : channels;\n        channelArray.forEach(channel => this.realtime.channels.add(channel));\n\n        const counter = this.realtime.subscriptionsCounter++;\n        this.realtime.subscriptions.set(counter, {\n            channels: channelArray,\n            callback\n        });\n\n        this.realtime.connect();\n\n        return () => {\n            this.realtime.subscriptions.delete(counter);\n            this.realtime.cleanUp(channelArray);\n            this.realtime.connect();\n        }\n    }\n\n    async call(method: string, url: URL, headers: Headers = {}, params: Payload = {}): Promise<any> {\n        method = method.toUpperCase();\n\n\n        headers = Object.assign({}, this.headers, headers);\n\n        let options: RequestInit = {\n            method,\n            headers,\n            credentials: 'include'\n        };\n\n        if (typeof window !== 'undefined' && window.localStorage) {\n            const cookieFallback = window.localStorage.getItem('cookieFallback');\n            if (cookieFallback) {\n                headers['X-Fallback-Cookies'] = cookieFallback;\n            }\n        }\n\n        if (method === 'GET') {\n            for (const [key, value] of Object.entries(Service.flatten(params))) {\n                url.searchParams.append(key, value);\n            }\n        } else {\n            switch (headers['content-type']) {\n                case 'application/json':\n                    options.body = JSON.stringify(params);\n                    break;\n\n                case 'multipart/form-data':\n                    let formData = new FormData();\n\n                    for (const key in params) {\n                        if (Array.isArray(params[key])) {\n                            params[key].forEach((value: any) => {\n                                formData.append(key + '[]', value);\n                            })\n                        } else {\n                            formData.append(key, params[key]);\n                        }\n                    }\n\n                    options.body = formData;\n                    delete headers['content-type'];\n                    break;\n            }\n        }\n\n        try {\n            let data = null;\n            const response = await fetch(url.toString(), options);\n\n            if (response.headers.get('content-type')?.includes('application/json')) {\n                data = await response.json();\n            } else {\n                data = {\n                    message: await response.text()\n                };\n            }\n\n            if (400 <= response.status) {\n                throw new AppwriteException(data?.message, response.status, data?.type, data);\n            }\n\n            const cookieFallback = response.headers.get('X-Fallback-Cookies');\n\n            if (typeof window !== 'undefined' && window.localStorage && cookieFallback) {\n                window.console.warn('Appconda is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');\n                window.localStorage.setItem('cookieFallback', cookieFallback);\n            }\n\n            return data;\n        } catch (e) {\n            if (e instanceof AppwriteException) {\n                throw e;\n            }\n            throw new AppwriteException((<Error>e).message);\n        }\n    }\n}\n\nexport { Client, AppwriteException };\nexport { Query } from './query';\nexport type { Models, Payload };\nexport type { QueryTypes, QueryTypesList } from './query';\n","export enum AuthenticationFactor {\n    Email = 'email',\n    Phone = 'phone',\n    Totp = 'totp',\n    Recoverycode = 'recoverycode',\n}","export enum AuthenticatorType {\n    Totp = 'totp',\n}","export enum Browser {\n    AvantBrowser = 'aa',\n    AndroidWebViewBeta = 'an',\n    GoogleChrome = 'ch',\n    GoogleChromeIOS = 'ci',\n    GoogleChromeMobile = 'cm',\n    Chromium = 'cr',\n    MozillaFirefox = 'ff',\n    Safari = 'sf',\n    MobileSafari = 'mf',\n    MicrosoftEdge = 'ps',\n    MicrosoftEdgeIOS = 'oi',\n    OperaMini = 'om',\n    Opera = 'op',\n    OperaNext = 'on',\n}","export enum CreditCard {\n    AmericanExpress = 'amex',\n    Argencard = 'argencard',\n    Cabal = 'cabal',\n    Cencosud = 'cencosud',\n    DinersClub = 'diners',\n    Discover = 'discover',\n    Elo = 'elo',\n    Hipercard = 'hipercard',\n    JCB = 'jcb',\n    Mastercard = 'mastercard',\n    Naranja = 'naranja',\n    TarjetaShopping = 'targeta-shopping',\n    UnionChinaPay = 'union-china-pay',\n    Visa = 'visa',\n    MIR = 'mir',\n    Maestro = 'maestro',\n}","export enum ExecutionMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE',\n    OPTIONS = 'OPTIONS',\n}","export enum Flag {\n    Afghanistan = 'af',\n    Angola = 'ao',\n    Albania = 'al',\n    Andorra = 'ad',\n    UnitedArabEmirates = 'ae',\n    Argentina = 'ar',\n    Armenia = 'am',\n    AntiguaAndBarbuda = 'ag',\n    Australia = 'au',\n    Austria = 'at',\n    Azerbaijan = 'az',\n    Burundi = 'bi',\n    Belgium = 'be',\n    Benin = 'bj',\n    BurkinaFaso = 'bf',\n    Bangladesh = 'bd',\n    Bulgaria = 'bg',\n    Bahrain = 'bh',\n    Bahamas = 'bs',\n    BosniaAndHerzegovina = 'ba',\n    Belarus = 'by',\n    Belize = 'bz',\n    Bolivia = 'bo',\n    Brazil = 'br',\n    Barbados = 'bb',\n    BruneiDarussalam = 'bn',\n    Bhutan = 'bt',\n    Botswana = 'bw',\n    CentralAfricanRepublic = 'cf',\n    Canada = 'ca',\n    Switzerland = 'ch',\n    Chile = 'cl',\n    China = 'cn',\n    CoteDIvoire = 'ci',\n    Cameroon = 'cm',\n    DemocraticRepublicOfTheCongo = 'cd',\n    RepublicOfTheCongo = 'cg',\n    Colombia = 'co',\n    Comoros = 'km',\n    CapeVerde = 'cv',\n    CostaRica = 'cr',\n    Cuba = 'cu',\n    Cyprus = 'cy',\n    CzechRepublic = 'cz',\n    Germany = 'de',\n    Djibouti = 'dj',\n    Dominica = 'dm',\n    Denmark = 'dk',\n    DominicanRepublic = 'do',\n    Algeria = 'dz',\n    Ecuador = 'ec',\n    Egypt = 'eg',\n    Eritrea = 'er',\n    Spain = 'es',\n    Estonia = 'ee',\n    Ethiopia = 'et',\n    Finland = 'fi',\n    Fiji = 'fj',\n    France = 'fr',\n    MicronesiaFederatedStatesOf = 'fm',\n    Gabon = 'ga',\n    UnitedKingdom = 'gb',\n    Georgia = 'ge',\n    Ghana = 'gh',\n    Guinea = 'gn',\n    Gambia = 'gm',\n    GuineaBissau = 'gw',\n    EquatorialGuinea = 'gq',\n    Greece = 'gr',\n    Grenada = 'gd',\n    Guatemala = 'gt',\n    Guyana = 'gy',\n    Honduras = 'hn',\n    Croatia = 'hr',\n    Haiti = 'ht',\n    Hungary = 'hu',\n    Indonesia = 'id',\n    India = 'in',\n    Ireland = 'ie',\n    IranIslamicRepublicOf = 'ir',\n    Iraq = 'iq',\n    Iceland = 'is',\n    Israel = 'il',\n    Italy = 'it',\n    Jamaica = 'jm',\n    Jordan = 'jo',\n    Japan = 'jp',\n    Kazakhstan = 'kz',\n    Kenya = 'ke',\n    Kyrgyzstan = 'kg',\n    Cambodia = 'kh',\n    Kiribati = 'ki',\n    SaintKittsAndNevis = 'kn',\n    SouthKorea = 'kr',\n    Kuwait = 'kw',\n    LaoPeopleSDemocraticRepublic = 'la',\n    Lebanon = 'lb',\n    Liberia = 'lr',\n    Libya = 'ly',\n    SaintLucia = 'lc',\n    Liechtenstein = 'li',\n    SriLanka = 'lk',\n    Lesotho = 'ls',\n    Lithuania = 'lt',\n    Luxembourg = 'lu',\n    Latvia = 'lv',\n    Morocco = 'ma',\n    Monaco = 'mc',\n    Moldova = 'md',\n    Madagascar = 'mg',\n    Maldives = 'mv',\n    Mexico = 'mx',\n    MarshallIslands = 'mh',\n    NorthMacedonia = 'mk',\n    Mali = 'ml',\n    Malta = 'mt',\n    Myanmar = 'mm',\n    Montenegro = 'me',\n    Mongolia = 'mn',\n    Mozambique = 'mz',\n    Mauritania = 'mr',\n    Mauritius = 'mu',\n    Malawi = 'mw',\n    Malaysia = 'my',\n    Namibia = 'na',\n    Niger = 'ne',\n    Nigeria = 'ng',\n    Nicaragua = 'ni',\n    Netherlands = 'nl',\n    Norway = 'no',\n    Nepal = 'np',\n    Nauru = 'nr',\n    NewZealand = 'nz',\n    Oman = 'om',\n    Pakistan = 'pk',\n    Panama = 'pa',\n    Peru = 'pe',\n    Philippines = 'ph',\n    Palau = 'pw',\n    PapuaNewGuinea = 'pg',\n    Poland = 'pl',\n    FrenchPolynesia = 'pf',\n    NorthKorea = 'kp',\n    Portugal = 'pt',\n    Paraguay = 'py',\n    Qatar = 'qa',\n    Romania = 'ro',\n    Russia = 'ru',\n    Rwanda = 'rw',\n    SaudiArabia = 'sa',\n    Sudan = 'sd',\n    Senegal = 'sn',\n    Singapore = 'sg',\n    SolomonIslands = 'sb',\n    SierraLeone = 'sl',\n    ElSalvador = 'sv',\n    SanMarino = 'sm',\n    Somalia = 'so',\n    Serbia = 'rs',\n    SouthSudan = 'ss',\n    SaoTomeAndPrincipe = 'st',\n    Suriname = 'sr',\n    Slovakia = 'sk',\n    Slovenia = 'si',\n    Sweden = 'se',\n    Eswatini = 'sz',\n    Seychelles = 'sc',\n    Syria = 'sy',\n    Chad = 'td',\n    Togo = 'tg',\n    Thailand = 'th',\n    Tajikistan = 'tj',\n    Turkmenistan = 'tm',\n    TimorLeste = 'tl',\n    Tonga = 'to',\n    TrinidadAndTobago = 'tt',\n    Tunisia = 'tn',\n    Turkey = 'tr',\n    Tuvalu = 'tv',\n    Tanzania = 'tz',\n    Uganda = 'ug',\n    Ukraine = 'ua',\n    Uruguay = 'uy',\n    UnitedStates = 'us',\n    Uzbekistan = 'uz',\n    VaticanCity = 'va',\n    SaintVincentAndTheGrenadines = 'vc',\n    Venezuela = 've',\n    Vietnam = 'vn',\n    Vanuatu = 'vu',\n    Samoa = 'ws',\n    Yemen = 'ye',\n    SouthAfrica = 'za',\n    Zambia = 'zm',\n    Zimbabwe = 'zw',\n}","export enum ImageFormat {\n    Jpg = 'jpg',\n    Jpeg = 'jpeg',\n    Gif = 'gif',\n    Png = 'png',\n    Webp = 'webp',\n}","export enum ImageGravity {\n    Center = 'center',\n    Topleft = 'top-left',\n    Top = 'top',\n    Topright = 'top-right',\n    Left = 'left',\n    Right = 'right',\n    Bottomleft = 'bottom-left',\n    Bottom = 'bottom',\n    Bottomright = 'bottom-right',\n}","export enum OAuthProvider {\n    Amazon = 'amazon',\n    Apple = 'apple',\n    Auth0 = 'auth0',\n    Authentik = 'authentik',\n    Autodesk = 'autodesk',\n    Bitbucket = 'bitbucket',\n    Bitly = 'bitly',\n    Box = 'box',\n    Dailymotion = 'dailymotion',\n    Discord = 'discord',\n    Disqus = 'disqus',\n    Dropbox = 'dropbox',\n    Etsy = 'etsy',\n    Facebook = 'facebook',\n    Github = 'github',\n    Gitlab = 'gitlab',\n    Google = 'google',\n    Linkedin = 'linkedin',\n    Microsoft = 'microsoft',\n    Notion = 'notion',\n    Oidc = 'oidc',\n    Okta = 'okta',\n    Paypal = 'paypal',\n    PaypalSandbox = 'paypalSandbox',\n    Podio = 'podio',\n    Salesforce = 'salesforce',\n    Slack = 'slack',\n    Spotify = 'spotify',\n    Stripe = 'stripe',\n    Tradeshift = 'tradeshift',\n    TradeshiftBox = 'tradeshiftBox',\n    Twitch = 'twitch',\n    Wordpress = 'wordpress',\n    Yahoo = 'yahoo',\n    Yammer = 'yammer',\n    Yandex = 'yandex',\n    Zoho = 'zoho',\n    Zoom = 'zoom',\n    Mock = 'mock',\n}","export class ID {\n    // Generate an hex ID based on timestamp\n    // Recreated from https://www.php.net/manual/en/function.uniqid.php\n    static #hexTimestamp(): string {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    public static custom(id: string): string {\n        return id\n    }\n\n    public static unique(padding: number = 7): string {\n        // Generate a unique ID with padding to have a longer ID\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n        return baseId + randomPadding;\n    }\n}\n","export class Permission {\n\n    static read = (role: string): string => {\n        return `read(\"${role}\")`\n    }\n\n    static write = (role: string): string => {\n        return `write(\"${role}\")`\n    }\n\n    static create = (role: string): string => {\n        return `create(\"${role}\")`\n    }\n\n    static update = (role: string): string => {\n        return `update(\"${role}\")`\n    }\n\n    static delete = (role: string): string => {\n        return `delete(\"${role}\")`\n    }\n}\n","type QueryTypesSingle = string | number | boolean;\nexport type QueryTypesList = string[] | number[] | boolean[] | Query[];\nexport type QueryTypes = QueryTypesSingle | QueryTypesList;\ntype AttributesTypes = string | string[];\n\nexport class Query {\n  method: string;\n  attribute: AttributesTypes | undefined;\n  values: QueryTypesList | undefined;\n\n  constructor(\n    method: string,\n    attribute?: AttributesTypes,\n    values?: QueryTypes\n  ) {\n    this.method = method;\n    this.attribute = attribute;\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values;\n      } else {\n        this.values = [values] as QueryTypesList;\n      }\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify({\n      method: this.method,\n      attribute: this.attribute,\n      values: this.values,\n    });\n  }\n\n  static equal = (attribute: string, value: QueryTypes): string =>\n    new Query(\"equal\", attribute, value).toString();\n\n  static notEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"notEqual\", attribute, value).toString();\n\n  static lessThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThan\", attribute, value).toString();\n\n  static lessThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThanEqual\", attribute, value).toString();\n\n  static greaterThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThan\", attribute, value).toString();\n\n  static greaterThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThanEqual\", attribute, value).toString();\n\n  static isNull = (attribute: string): string =>\n    new Query(\"isNull\", attribute).toString();\n\n  static isNotNull = (attribute: string): string =>\n    new Query(\"isNotNull\", attribute).toString();\n\n  static between = (attribute: string, start: string | number, end: string | number) =>\n    new Query(\"between\", attribute, [start, end] as QueryTypesList).toString();\n\n  static startsWith = (attribute: string, value: string): string =>\n    new Query(\"startsWith\", attribute, value).toString();\n\n  static endsWith = (attribute: string, value: string): string =>\n    new Query(\"endsWith\", attribute, value).toString();\n\n  static select = (attributes: string[]): string =>\n    new Query(\"select\", undefined, attributes).toString();\n\n  static search = (attribute: string, value: string): string =>\n    new Query(\"search\", attribute, value).toString();\n\n  static orderDesc = (attribute: string): string =>\n    new Query(\"orderDesc\", attribute).toString();\n\n  static orderAsc = (attribute: string): string =>\n    new Query(\"orderAsc\", attribute).toString();\n\n  static cursorAfter = (documentId: string): string =>\n    new Query(\"cursorAfter\", undefined, documentId).toString();\n\n  static cursorBefore = (documentId: string): string =>\n    new Query(\"cursorBefore\", undefined, documentId).toString();\n\n  static limit = (limit: number): string =>\n    new Query(\"limit\", undefined, limit).toString();\n\n  static offset = (offset: number): string =>\n    new Query(\"offset\", undefined, offset).toString();\n\n  static contains = (attribute: string, value: string | string[]): string =>\n    new Query(\"contains\", attribute, value).toString();\n\n  static or = (queries: string[]) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString();\n\n  static and = (queries: string[]) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n}\n","/**\n * Helper class to generate role strings for `Permission`.\n */\nexport class Role {\n\n    /**\n     * Grants access to anyone.\n     * \n     * This includes authenticated and unauthenticated users.\n     * \n     * @returns {string}\n     */\n    public static any(): string {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    public static user(id: string, status: string = ''): string {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     * \n     * @param {string} status \n     * @returns {string}\n     */\n    public static users(status: string = ''): string {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     * \n     * Authenticated users don't have access to this role.\n     * \n     * @returns {string}\n     */\n    public static guests(): string {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     * \n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    public static team(id: string, role: string = ''): string {\n        if (role === '') {\n            return `team:${id}`\n        }\n        return `team:${id}/${role}`\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     * \n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    public static member(id: string): string {\n        return `member:${id}`\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     * \n     * @param {string} name \n     * @returns  {string}\n     */\n    public static label(name: string): string {\n        return `label:${name}`\n    }\n}","import { Client } from './client';\nimport type { Payload } from './client';\n\nexport class Service {\n    static CHUNK_SIZE = 5*1024*1024; // 5MB\n\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    static flatten(data: Payload, prefix = ''): Payload {\n        let output: Payload = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + '[' + key +']' : key;\n            if (Array.isArray(value)) {\n                output = { ...output, ...Service.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { AuthenticationFactor } from '../enums/authentication-factor';\nimport { OAuthProvider } from '../enums/o-auth-provider';\n\nexport class Account extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create account\n     *\n     * Use this endpoint to allow a new user to register a new account in your\n     * project. After the user registration completes successfully, you can use\n     * the\n     * [/account/verfication](https://appconda.io/docs/references/cloud/client-web/account#createVerification)\n     * route to start verifying the user email address. To allow the new user to\n     * login to their new account, you need to create a new [account\n     * session](https://appconda.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async create<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user\n     * address, the user confirmation status will get reset. A new confirmation\n     * email is not sent automatically however you can use the send confirmation\n     * email endpoint again to send the confirmation email. For security measures,\n     * user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal\n     * one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateEmail<Preferences extends Models.Preferences>(email: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/email';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listIdentities(queries?: string[]): Promise<Models.IdentityList> {\n        const apiPath = '/account/identities';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteIdentity(identityId: string): Promise<{}> {\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create JWT\n     *\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\n     * to authenticate on behalf of the current user when working with the\n     * Appconda server-side API and SDKs. The JWT secret is valid for 15 minutes\n     * from its creation and will be invalid if the user will logout in that time\n     * frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createJWT(): Promise<Models.Jwt> {\n        const apiPath = '/account/jwt';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in\n     * user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listLogs(queries?: string[]): Promise<Models.LogList> {\n        const apiPath = '/account/logs';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMFA<Preferences extends Models.Preferences>(mfa: boolean): Promise<Models.User<Preferences>> {\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n        const apiPath = '/account/mfa';\n        const payload: Payload = {};\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Add Authenticator\n     *\n     * Add an authenticator app to be used as an MFA factor. Verify the\n     * authenticator using the [verify\n     * authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaAuthenticator(type: AuthenticatorType): Promise<Models.MfaType> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Verify Authenticator\n     *\n     * Verify an authenticator app after adding it using the [add\n     * authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator)\n     * method. add \n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaAuthenticator<Preferences extends Models.Preferences>(type: AuthenticatorType, otp: string): Promise<Models.User<Preferences>> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteMfaAuthenticator(type: AuthenticatorType, otp: string): Promise<{}> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create 2FA Challenge\n     *\n     * Begin the process of MFA verification after sign-in. Finish the flow with\n     * [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge)\n     * method.\n     *\n     * @param {AuthenticationFactor} factor\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaChallenge(factor: AuthenticationFactor): Promise<Models.MfaChallenge> {\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Challenge (confirmation)\n     *\n     * Complete the MFA challenge by providing the one-time password. Finish the\n     * process of MFA verification by providing the one-time password. To begin\n     * the flow, use\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @param {string} challengeId\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaChallenge(challengeId: string, otp: string): Promise<{}> {\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listMfaFactors(): Promise<Models.MfaFactors> {\n        const apiPath = '/account/mfa/factors';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow. Before getting\n     * codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes as backup for MFA flow. It's recommended to\n     * generate and show then immediately after user successfully adds their\n     * authehticator. Recovery codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before\n     * regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateName<Preferences extends Models.Preferences>(name: string): Promise<Models.User<Preferences>> {\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/account/name';\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required\n     * to pass in the new password, and the old password. For users created with\n     * OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePassword<Preferences extends Models.Preferences>(password: string, oldPassword?: string): Promise<Models.User<Preferences>> {\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/password';\n        const payload: Payload = {};\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user's phone number. After updating the\n     * phone number, the phone verification status will be reset. A confirmation\n     * SMS is not sent automatically, however you can use the [POST\n     * /account/verification/phone](https://appconda.io/docs/references/cloud/client-web/account#createPhoneVerification)\n     * endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhone<Preferences extends Models.Preferences>(phone: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/phone';\n        const payload: Payload = {};\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getPrefs<Preferences extends Models.Preferences>(): Promise<Preferences> {\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is\n     * stored as is, and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws error if exceeded.\n     *\n     * @param {Partial<Preferences>} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePrefs<Preferences extends Models.Preferences>(prefs: Partial<Preferences>): Promise<Models.User<Preferences>> {\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset.\n     * When the user clicks the confirmation link he is redirected back to your\n     * app password reset URL with the secret key and email address values\n     * attached to the URL query string. Use the query string params to submit a\n     * request to the [PUT\n     * /account/recovery](https://appconda.io/docs/references/cloud/client-web/account#updateRecovery)\n     * endpoint to complete the process. The verification link sent to the user's\n     * email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createRecovery(email: string, url: string): Promise<Models.Token> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the\n     * **userId** and **secret** arguments will be passed as query parameters to\n     * the redirect URL you have provided when sending your request to the [POST\n     * /account/recovery](https://appconda.io/docs/references/cloud/client-web/account#createRecovery)\n     * endpoint.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateRecovery(userId: string, secret: string, password: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently\n     * logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listSessions(): Promise<Models.SessionList> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies\n     * from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSessions(): Promise<{}> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create anonymous session\n     *\n     * Use this endpoint to allow a new user to register an anonymous account in\n     * your project. This route will also create a new session for the user. To\n     * allow the new user to convert an anonymous account to a normal account, you\n     * need to update its [email and\n     * password](https://appconda.io/docs/references/cloud/client-web/account#updateEmail)\n     * or create an [OAuth2\n     * session](https://appconda.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createAnonymousSession(): Promise<Models.Session> {\n        const apiPath = '/account/sessions/anonymous';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email password session\n     *\n     * Allow the user to login into their account by providing a valid email and\n     * password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createEmailPasswordSession(email: string, password: string): Promise<Models.Session> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/sessions/email';\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update magic URL session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMagicURLSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/magic-url';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 session\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appconda console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed.\n     * \n     * If there is already an active session, the new session will be attached to\n     * the logged-in account. If there are no active sessions, the server will\n     * attempt to look for a user with the same email address as the email\n     * received from the OAuth2 provider and attach the new session to the\n     * existing user. If no matching user is found - the server will create a new\n     * user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {void|string}\n    */\n    createOAuth2Session(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): void | URL {\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n        const apiPath = '/account/sessions/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        if (typeof window !== 'undefined' && window?.location) {\n            window.location.href = uri.toString();\n        } else {\n            return uri;\n        }\n    }\n\n    /**\n     * Update phone session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhoneSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/token';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user's session using a Session ID.\n     * Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update session\n     *\n     * Use this endpoint to extend a session's length. Extending a session is\n     * useful when session expiry is short. If the session was created using an\n     * OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete session\n     *\n     * Logout the user. Use 'current' as the session ID to logout on this device,\n     * use a session ID to logout on another device. If you're looking to logout\n     * the user on all devices, use [Delete\n     * Sessions](https://appconda.io/docs/references/cloud/client-web/account#deleteSessions)\n     * instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSession(sessionId: string): Promise<{}> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user\n     * record is not deleted but permanently blocked from any access. To\n     * completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateStatus<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account/status';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create push target\n     *\n     *\n     * @param {string} targetId\n     * @param {string} identifier\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPushTarget(targetId: string, identifier: string, providerId?: string): Promise<Models.Target> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n        const apiPath = '/account/targets/push';\n        const payload: Payload = {};\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update push target\n     *\n     *\n     * @param {string} targetId\n     * @param {string} identifier\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePushTarget(targetId: string, identifier: string): Promise<Models.Target> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n        const apiPath = '/account/targets/{targetId}/push'.replace('{targetId}', targetId);\n        const payload: Payload = {};\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete push target\n     *\n     *\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deletePushTarget(targetId: string): Promise<{}> {\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/account/targets/{targetId}/push'.replace('{targetId}', targetId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email token (OTP)\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appconda.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's email\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createEmailToken(userId: string, email: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/email';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create magic URL token\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not been registered, a new user will be created. When\n     * the user clicks the link in the email, the user is redirected back to the\n     * URL you provided with the secret key and userId values attached to the URL\n     * query string. Use the query string parameters to submit a request to the\n     * [POST\n     * /v1/account/sessions/token](https://appconda.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The link sent to the user's email\n     * address is valid for 1 hour. If you are on a mobile device you can leave\n     * the URL parameter empty, so that the login completion will be handled by\n     * your Appconda instance by default.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} url\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMagicURLToken(userId: string, email: string, url?: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/magic-url';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 token\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appconda console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be\n     * appended to the success URL as query parameters. These can be used to\n     * create a new session using the [Create\n     * session](https://appconda.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {void|string}\n    */\n    createOAuth2Token(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): void | URL {\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        if (typeof window !== 'undefined' && window?.location) {\n            window.location.href = uri.toString();\n        } else {\n            return uri;\n        }\n    }\n\n    /**\n     * Create phone token\n     *\n     * Sends the user an SMS with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appconda.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's phone\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appconda.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} phone\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPhoneToken(userId: string, phone: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        const apiPath = '/account/tokens/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address\n     * to confirm they are the valid owners of that address. Both the **userId**\n     * and **secret** arguments will be passed as query parameters to the URL you\n     * have provided to be attached to the verification email. The provided URL\n     * should redirect the user back to your app and allow you to complete the\n     * verification process by verifying both the **userId** and **secret**\n     * parameters. Learn more about how to [complete the verification\n     * process](https://appconda.io/docs/references/cloud/client-web/account#updateVerification).\n     * The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createVerification(url: string): Promise<Models.Token> {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both\n     * the **userId** and **secret** parameters that were attached to your app URL\n     * to verify the user email ownership. If confirmed this route will return a\n     * 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in\n     * user. This endpoint is meant for use after updating a user's phone number\n     * using the\n     * [accountUpdatePhone](https://appconda.io/docs/references/cloud/client-web/account#updatePhone)\n     * endpoint. Learn more about how to [complete the verification\n     * process](https://appconda.io/docs/references/cloud/client-web/account#updatePhoneVerification).\n     * The verification code sent to the user's phone number is valid for 15\n     * minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createPhoneVerification(): Promise<Models.Token> {\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the\n     * **userId** and **secret** that were sent to your user's phone number to\n     * verify the user email ownership. If confirmed this route will return a 200\n     * status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePhoneVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { Browser } from '../enums/browser';\nimport { CreditCard } from '../enums/credit-card';\nimport { Flag } from '../enums/flag';\n\nexport class Avatars extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users.\n     * The code argument receives the browser code as it appears in your user [GET\n     * /account/sessions](https://appconda.io/docs/references/cloud/client-web/account#getSessions)\n     * endpoint. Use width, height and quality arguments to change the output\n     * settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     *\n     * @param {Browser} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getBrowser(code: Browser, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card\n     * provider you need. Use width, height and quality arguments to change the\n     * output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getCreditCard(code: CreditCard, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n     * website URL.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFavicon(url: string): URL {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/favicon';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your\n     * users. The code argument receives the 2 letter country code. Use width,\n     * height and quality arguments to change the output settings. Country codes\n     * follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFlag(code: Flag, width?: number, height?: number, quality?: number): URL {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size\n     * you want. This endpoint is very useful if you need to crop and display\n     * remote images in your app or in case you want to make sure a 3rd party\n     * image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 400x400px.\n     * \n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getImage(url: string, width?: number, height?: number): URL {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/image';\n        const payload: Payload = {};\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or\n     * app. By default, this route will try to print your logged-in user name or\n     * email initials. You can also overwrite the user name if you pass the 'name'\n     * parameter. If no name is given and no user is logged, an empty avatar will\n     * be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By\n     * default, a random theme will be selected. The random theme will persist for\n     * the user's initials when reloading the same theme will always return for\n     * the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getInitials(name?: string, width?: number, height?: number, background?: string): URL {\n        const apiPath = '/avatars/initials';\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query\n     * parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getQR(text: string, size?: number, margin?: number, download?: boolean): URL {\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n\n        const apiPath = '/avatars/qr';\n        const payload: Payload = {};\n\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Databases extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List documents\n     *\n     * Get a list of all the user's documents in a given collection. You can use\n     * the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listDocuments<Document extends Models.Document>(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.DocumentList<Document>> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new\n     * collection resource using either a [server\n     * integration](https://appconda.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Omit<Document, keyof Models.Document>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data: Omit<Document, keyof Models.Document>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON\n     * object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, queries?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass\n     * only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Partial<Omit<Document, keyof Models.Document>>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data?: Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteDocument(databaseId: string, collectionId: string, documentId: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { ExecutionMethod } from '../enums/execution-method';\n\nexport class Functions extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the\n     * query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listExecutions(functionId: string, queries?: string[], search?: string): Promise<Models.ExecutionList> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the\n     * current execution status. You can ping the `Get Execution` endpoint to get\n     * updates on the current execution status. Once this endpoint is called, your\n     * function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {ExecutionMethod} method\n     * @param {object} headers\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createExecution(functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getExecution(functionId: string, executionId: string): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Graphql extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async query(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql';\n        const payload: Payload = {};\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async mutation(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql/mutation';\n        const payload: Payload = {};\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Locale extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user\n     * country code, country name, continent name, continent code, ip address and\n     * suggested currency. You can use the locale header to get the data in a\n     * supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get(): Promise<Models.Locale> {\n        const apiPath = '/locale';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Locale Codes\n     *\n     * List of all locale codes in [ISO\n     * 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCodes(): Promise<Models.LocaleCodeList> {\n        const apiPath = '/locale/codes';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listContinents(): Promise<Models.ContinentList> {\n        const apiPath = '/locale/continents';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountries(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the\n     * locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountriesEU(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries/eu';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the\n     * data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCountriesPhones(): Promise<Models.PhoneList> {\n        const apiPath = '/locale/countries/phones';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and\n     * decimal digits for all major and minor currencies. You can use the locale\n     * header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listCurrencies(): Promise<Models.CurrencyList> {\n        const apiPath = '/locale/currencies';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name\n     * in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listLanguages(): Promise<Models.LanguageList> {\n        const apiPath = '/locale/languages';\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Messaging extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * Create subscriber\n     *\n     * Create a new subscriber.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createSubscriber(topicId: string, subscriberId: string, targetId: string): Promise<Models.Subscriber> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete subscriber\n     *\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteSubscriber(topicId: string, subscriberId: string): Promise<{}> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\nimport { ImageGravity } from '../enums/image-gravity';\nimport { ImageFormat } from '../enums/image-format';\n\nexport class Storage extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter\n     * your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listFiles(bucketId: string, queries?: string[], search?: string): Promise<Models.FileList> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket\n     * resource using either a [server\n     * integration](https://appconda.io/docs/server/storage#storageCreateBucket)\n     * API or directly from your Appconda console.\n     * \n     * Larger files should be uploaded using multiple requests with the\n     * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)\n     * header to send a partial request with a maximum supported chunk of `5MB`.\n     * The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object,\n     * and the subsequent part request must include the file's **id** in\n     * `x-appconda-id` header to allow the server to know that the partial upload\n     * is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appconda SDKs, all the\n     * chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {File} file\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createFile(bucketId: string, fileId: string, file: File, permissions?: string[], onProgress = (progress: UploadProgress) => {}): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        if(!(file instanceof File)) {\n            throw new AppwriteException('Parameter \"file\" has to be a File.');\n        }\n\n        const size = file.size;\n\n        if (size <= Service.CHUNK_SIZE) {\n            return await this.client.call('post', uri, {\n                'content-type': 'multipart/form-data',\n            }, payload);\n        }\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        let offset = 0;\n        let response = undefined;\n        if(fileId != 'unique()') {\n            try {\n                response = await this.client.call('GET', new URL(this.client.config.endpoint + apiPath + '/' + fileId), apiHeaders);\n                offset = response.chunksUploaded * Service.CHUNK_SIZE;\n            } catch(e) {\n            }\n        }\n\n        while (offset < size) {\n            let end = Math.min(offset + Service.CHUNK_SIZE - 1, size - 1);\n\n            apiHeaders['content-range'] = 'bytes ' + offset + '-' + end + '/' + size;\n            if (response && response.$id) {\n                apiHeaders['x-appconda-id'] = response.$id;\n            }\n\n            const chunk = file.slice(offset, end + 1);\n            payload['file'] = new File([chunk], file.name);\n            response = await this.client.call('post', uri, apiHeaders, payload);\n\n            if (onProgress) {\n                onProgress({\n                    $id: response.$id,\n                    progress: (offset / size) * 100,\n                    sizeUploaded: offset,\n                    chunksTotal: response.chunksTotal,\n                    chunksUploaded: response.chunksUploaded\n                });\n            }\n            offset += Service.CHUNK_SIZE;\n        }\n        return response;\n    }\n\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object\n     * with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getFile(bucketId: string, fileId: string): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have\n     * access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateFile(bucketId: string, fileId: string, name?: string, permissions?: string[]): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete File\n     *\n     * Delete a file by its unique ID. Only users with write permissions have\n     * access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteFile(bucketId: string, fileId: string): Promise<{}> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a\n     * 'Content-Disposition: attachment' header that tells the browser to start\n     * downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFileDownload(bucketId: string, fileId: string): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image\n     * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n     * and spreadsheets, will return the file icon image. You can also pass query\n     * string arguments for cutting and resizing your preview image. Preview is\n     * supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {ImageGravity} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {ImageFormat} output\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFilePreview(bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the\n     * download method but returns with no  'Content-Disposition: attachment'\n     * header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {URL}\n    */\n    getFileView(bucketId: string, fileId: string): URL {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        payload['project'] = this.client.config.project;\n\n\n        for (const [key, value] of Object.entries(Service.flatten(payload))) {\n            uri.searchParams.append(key, value);\n        }\n        return uri;\n    }\n};\n","import { Service } from '../service';\nimport { AppwriteException, Client } from '../client';\nimport type { Models } from '../models';\nimport type { UploadProgress, Payload } from '../client';\n\nexport class Teams extends Service {\n\n     constructor(client: Client)\n     {\n        super(client);\n     }\n\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can\n     * use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async list<Preferences extends Models.Preferences>(queries?: string[], search?: string): Promise<Models.TeamList<Preferences>> {\n        const apiPath = '/teams';\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be\n     * assigned as the owner of the team. Only the users with the owner role can\n     * invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async create<Preferences extends Models.Preferences>(teamId: string, name: string, roles?: string[]): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams';\n        const payload: Payload = {};\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async get<Preferences extends Models.Preferences>(teamId: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateName<Preferences extends Models.Preferences>(teamId: string, name: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can\n     * delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async delete(teamId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team's members using the team's ID. All team\n     * members have read access to this endpoint.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async listMemberships(teamId: string, queries?: string[], search?: string): Promise<Models.MembershipList> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or\n     * invite unregistered users using an email or phone number. If initiated from\n     * a Client SDK, Appconda will send an email or sms with a link to join the\n     * team to the invited user, and an account will be created for them if one\n     * doesn't exist. If initiated from a Server SDK, the new member will be added\n     * automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appconda\n     * will prioritize accepting the user ID > email > phone number if you provide\n     * more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to\n     * your app. After the user is redirected, use the [Update Team Membership\n     * Status](https://appconda.io/docs/references/cloud/client-web/teams#updateMembershipStatus)\n     * endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * Appconda will accept the only redirect URLs under the domains you have\n     * added as a platform on the Appconda Console.\n     * \n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async createMembership(teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('post', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read\n     * access for this resource.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getMembership(teamId: string, membershipId: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role\n     * have access to this endpoint. Learn more about [roles and\n     * permissions](https://appconda.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMembership(teamId: string, membershipId: string, roles: string[]): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete\n     * the membership of any other team member. You can also use this endpoint to\n     * delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async deleteMembership(teamId: string, membershipId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('delete', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team\n     * after being redirected back to your app from the invitation email received\n     * by the user.\n     * \n     * If the request is successful, a session for the user is automatically\n     * created.\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('patch', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team preferences\n     *\n     * Get the team's shared preferences by its unique ID. If a preference doesn't\n     * need to be shared by all team members, prefer storing them in [user\n     * preferences](https://appconda.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async getPrefs<Preferences extends Models.Preferences>(teamId: string): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('get', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update the team's preferences by its unique ID. The object you pass is\n     * stored as is and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n    */\n    async updatePrefs<Preferences extends Models.Preferences>(teamId: string, prefs: object): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        return await this.client.call('put', uri, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { Client, Query, AppwriteException } from './client';\nexport { Account } from './services/account';\nexport { Avatars } from './services/avatars';\nexport { Databases } from './services/databases';\nexport { Functions } from './services/functions';\nexport { Graphql } from './services/graphql';\nexport { Locale } from './services/locale';\nexport { Messaging } from './services/messaging';\nexport { Storage } from './services/storage';\nexport { Teams } from './services/teams';\nexport type { Models, Payload, RealtimeResponseEvent, UploadProgress } from './client';\nexport type { QueryTypes, QueryTypesList } from './query';\nexport { Permission } from './permission';\nexport { Role } from './role';\nexport { ID } from './id';\nexport { AuthenticatorType } from './enums/authenticator-type';\nexport { AuthenticationFactor } from './enums/authentication-factor';\nexport { OAuthProvider } from './enums/o-auth-provider';\nexport { Browser } from './enums/browser';\nexport { CreditCard } from './enums/credit-card';\nexport { Flag } from './enums/flag';\nexport { ExecutionMethod } from './enums/execution-method';\nexport { ImageGravity } from './enums/image-gravity';\nexport { ImageFormat } from './enums/image-format';\n"],"names":[],"sourceRoot":""}